name: "Sigma • Skywire capture -> Sigma integration"

on:
  workflow_dispatch:

jobs:
  integrate:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas matplotlib

      - name: Date stamp (UTC)
        id: date
        run: echo "date=$(date -u +%F)" >> "$GITHUB_OUTPUT"

      - name: Prepare folders
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          mkdir -p "data/${DATE}" "reports/${DATE}" reports/latest .tmp

      - name: Define endpoints env (placeholder)
        run: |
          set -euo pipefail
          printf "036a_dummyA\n047b_dummyB\n" > .tmp/visors_pks.txt

      # 1) Capture : réutilise si présent ; sinon script repo ; sinon fallback minimal (sans heredoc)
      - name: Run VitalSigns (produce JSON)
        env:
          DATE: ${{ steps.date.outputs.date }}
        shell: bash
        run: |
          set -euo pipefail
          OUT_JSON="data/${DATE}/skywire_vitals.json"
          OUT_MD="data/${DATE}/skywire_summary.md"
          mkdir -p "$(dirname "$OUT_JSON")"

          if [ -s "$OUT_JSON" ]; then
            echo "Reusing existing capture: $OUT_JSON"
          elif [ -f scripts/skywire_vitals.py ]; then
            echo "Using scripts/skywire_vitals.py"
            python scripts/skywire_vitals.py --out "$OUT_JSON" --summary "$OUT_MD"
          else
            echo "Fallback minimal capture -> JSON + MD"
            # JSON en une seule ligne (ASCII pur)
            echo '{"date_utc":"'"$DATE"'","meta":{"source":"fallback","repo":"Sigma-Lab-Framework"},"groups":[{"name":"explorer","endpoints":[],"payloads":[]}],"summary":{"height":null,"current_supply":null,"total_supply":null,"coin_hours":null}}' > "$OUT_JSON"
            # MD court
            printf "# Skywire VitalSigns (fallback)\n- generated: %sZ\n" "$(date -u +%FT%T)" > "$OUT_MD"
          fi

      # 2) Sanitize + mini-report + Transform -> Sigma (sans heredoc)
      - name: Sanitize + report + transform to Sigma
        env:
          DATE: ${{ steps.date.outputs.date }}
        shell: bash
        run: |
          set -euo pipefail
          IN="data/${DATE}/skywire_vitals.json"
          OUT_SAN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT_MD="reports/${DATE}/skywire_vital_report.md"
          OUT_SIG="reports/${DATE}/skywire_sigma_analysis.json"
          mkdir -p "$(dirname "$OUT_SAN")" reports/latest

          # Sanitize simple (retire clés _private si présentes) via python -c (une seule ligne)
          python -c 'import json,sys; p=json.load(open(sys.argv[1],"r",encoding="utf-8"))
for g in p.get("groups",[]): 
  for pl in g.get("payloads",[]): 
    for k in list(pl.keys()): 
      (pl.pop(k) if k.lower().startswith("_private") else None)
json.dump(p,open(sys.argv[2],"w",encoding="utf-8"),ensure_ascii=False,indent=2)' "$IN" "$OUT_SAN"

          # Report MD minimal
          {
            echo "# Skywire Vital Report"
            echo
            echo "Last measurement: $(jq -r .date_utc "$OUT_SAN" 2>/dev/null || echo "$DATE")"
            echo
            echo "## Daily Summary"
            echo
            echo "* Success ratio : - ( - - )"
            echo "* Latency avg  : - ms ( - - )"
            echo "* Nodes active : - ( - - )"
            echo "* Proxy activity (tx) : - ( - - )"
            echo
            echo "> Auto-generated by Sigma - Skywire Vital Report."
          } > "$OUT_MD"

          # Bridge: utilise scripts/bridge.py si dispo, sinon fallback JSON minimal
          if [ -f scripts/bridge.py ]; then
            echo "Using scripts/bridge.py"
            python scripts/bridge.py --in "$OUT_SAN" --out "$OUT_SIG" --md "$OUT_MD" --sigma "$OUT_SIG" || true
          else
            echo '{"version":1,"source":"bridge-inline","metrics":{"note":"fallback"}}' > "$OUT_SIG"
          fi

          ln -sf "../${DATE}/skywire_vital_report.md" "reports/latest/skywire_vital_report.md" || true
          ln -sf "../${DATE}/skywire_vitals_sanitized.json" "reports/latest/skywire_vitals_sanitized.json" || true
          ln -sf "../${DATE}/skywire_sigma_analysis.json" "reports/latest/skywire_sigma_analysis.json" || true

      - name: Upload SANITIZED JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: sigma_sanitized_${{ steps.date.outputs.date }}
          path: reports/${{ steps.date.outputs.date }}/skywire_vitals_sanitized.json
          if-no-files-found: error
          retention-days: 7

      - name: Upload Integration Reports (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: sigma_reports_${{ steps.date.outputs.date }}
          path: |
            reports/${{ steps.date.outputs.date }}/skywire_vital_report.md
            reports/${{ steps.date.outputs.date }}/skywire_sigma_analysis.json
            reports/latest/skywire_vital_report.md
            reports/latest/skywire_sigma_analysis.json
          if-no-files-found: error
          retention-days: 7

      - name: Commit & push reports
        env:
          GIT_AUTHOR_NAME: sigma-bot
          GIT_AUTHOR_EMAIL: bot@sigma.local
          GIT_COMMITTER_NAME: sigma-bot
          GIT_COMMITTER_EMAIL: bot@sigma.local
          DATE: ${{ steps.date.outputs.date }}
        shell: bash
        run: |
          set -euo pipefail
          git add reports/
          if git diff --cached --quiet; then
            echo "Nothing to commit."
            exit 0
          fi
          git commit -m "report(skywire): vitals + integration — ${DATE}" -m "Artifacts: sanitized JSON, daily MD, Sigma analysis."
          BR="${GITHUB_REF_NAME:-main}"
          git pull --rebase --autostash origin "$BR" || true
          git push origin HEAD:"$BR"
