name: "Sigma • Skywire capture → Sigma integration"

on:
  workflow_dispatch:

jobs:
  integrate:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas matplotlib

      - name: Date stamp (UTC)
        id: date
        run: echo "date=$(date -u +%F)" >> "$GITHUB_OUTPUT"

      - name: Prepare folders
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          mkdir -p "data/${DATE}" "reports/${DATE}" reports/latest .tmp

      - name: Define endpoints env (placeholder)
        run: |
          set -euo pipefail
          printf "036a_dummyA\n047b_dummyB\n" > .tmp/visors_pks.txt

      - name: Run VitalSigns (produce JSON)
        env:
          DATE: ${{ steps.date.outputs.date }}
        shell: bash
        run: |
          set -euo pipefail
          OUT_JSON="data/${DATE}/skywire_vitals.json"
          OUT_MD="data/${DATE}/skywire_summary.md"

          if [ -s "$OUT_JSON" ]; then
            echo "Reusing existing capture: $OUT_JSON"
          elif [ -f scripts/skywire_vitals.py ]; then
            echo "Using scripts/skywire_vitals.py"
            python scripts/skywire_vitals.py --out "$OUT_JSON" --summary "$OUT_MD"
          else
            echo "Fallback minimal capture (inline Python)"
            # IMPORTANT: heredoc en dernier sur la ligne
            python - "$OUT_JSON" "$OUT_MD" "$DATE" <<'PY'
import os, json, datetime, pathlib, sys
out_json, out_md, d = sys.argv[1], sys.argv[2], sys.argv[3]
pathlib.Path(pathlib.Path(out_json).parent).mkdir(parents=True, exist_ok=True)
payload = {
  "date_utc": d,
  "meta": {"source": "fallback", "repo": "Sigma-Lab-Framework"},
  "groups": [{"name": "explorer", "endpoints": [], "payloads": []}],
  "summary": {"height": None, "current_supply": None, "total_supply": None, "coin_hours": None}
}
with open(out_json, "w", encoding="utf-8") as f:
  json.dump(payload, f, ensure_ascii=False, indent=2)
with open(out_md, "w", encoding="utf-8") as f:
  f.write("# Skywire VitalSigns (fallback)\n")
  f.write(f"- generated: {datetime.datetime.utcnow().isoformat()}Z\n")
PY
          fi

      - name: Sanitize + report + transform to Sigma
        env:
          DATE: ${{ steps.date.outputs.date }}
        shell: bash
        run: |
          set -euo pipefail
          IN="data/${DATE}/skywire_vitals.json"
          OUT_SAN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT_MD="reports/${DATE}/skywire_vital_report.md"
          OUT_SIG="reports/${DATE}/skywire_sigma_analysis.json"

          # Sanitize + mini-report (inline Python)
          python - "$IN" "$OUT_SAN" "$OUT_MD" <<'PY'
import json, sys, pathlib, datetime
src, dst, md = sys.argv[1], sys.argv[2], sys.argv[3]
pathlib.Path(pathlib.Path(dst).parent).mkdir(parents=True, exist_ok=True)
data = json.load(open(src, "r", encoding="utf-8"))
for grp in data.get("groups", []):
    for p in grp.get("payloads", []):
        for k in list(p.keys()):
            if k.lower().startswith("_private"):
                p.pop(k, None)
with open(dst, "w", encoding="utf-8") as f:
    json.dump(data, f, ensure_ascii=False, indent=2)
with open(md, "w", encoding="utf-8") as f:
    f.write("# Skywire Vital Report\n\n")
    f.write(f"Last measurement: {data.get('date_utc')}\n\n")
    f.write("## Daily Summary\n\n")
    f.write("* Success ratio : - (– –)\n")
    f.write("* Latency avg  : - ms (– –)\n")
    f.write("* Nodes active : - (– –)\n")
    f.write("* Proxy activity (tx) : - (– –)\n\n")
    f.write("> Auto-generated by Sigma – Skywire Vital Report.\n")
PY

          # Bridge vers Sigma (script repo si présent, sinon inline)
          if [ -f scripts/bridge.py ]; then
            python scripts/bridge.py --in "$OUT_SAN" --out "$OUT_SIG" --md "$OUT_MD" --sigma "$OUT_SIG"
          else
            python - "$OUT_SAN" "$OUT_SIG" <<'PY'
import json, sys, pathlib
src, dst = sys.argv[1], sys.argv[2]
data = json.load(open(src, "r", encoding="utf-8"))
sigma = {"version": 1, "source": "bridge-inline", "metrics": {"groups": len(data.get("groups", []))}}
pathlib.Path(pathlib.Path(dst).parent).mkdir(parents=True, exist_ok=True)
json.dump(sigma, open(dst, "w", encoding="utf-8"), ensure_ascii=False, indent=2)
PY
          fi

          # Latest symlinks
          ln -sf "../${DATE}/skywire_vital_report.md" "reports/latest/skywire_vital_report.md" || true
          ln -sf "../${DATE}/skywire_vitals_sanitized.json" "reports/latest/skywire_vitals_sanitized.json" || true
          ln -sf "../${DATE}/skywire_sigma_analysis.json" "reports/latest/skywire_sigma_analysis.json" || true

      - name: Upload SANITIZED JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: sigma_sanitized_${{ steps.date.outputs.date }}
          path: reports/${{ steps.date.outputs.date }}/skywire_vitals_sanitized.json
          if-no-files-found: error
          retention-days: 7

      - name: Upload Integration Reports (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: sigma_reports_${{ steps.date.outputs.date }}
          path: |
            reports/${{ steps.date.outputs.date }}/skywire_vital_report.md
            reports/${{ steps.date.outputs.date }}/skywire_sigma_analysis.json
            reports/latest/skywire_vital_report.md
            reports/latest/skywire_sigma_analysis.json
          if-no-files-found: error
          retention-days: 7

      - name: Commit & push reports
        env:
          GIT_AUTHOR_NAME: sigma-bot
          GIT_AUTHOR_EMAIL: bot@sigma.local
          GIT_COMMITTER_NAME: sigma-bot
          GIT_COMMITTER_EMAIL: bot@sigma.local
          DATE: ${{ steps.date.outputs.date }}
        shell: bash
        run: |
          set -euo pipefail
          git add reports/
          if git diff --cached --quiet; then
            echo "Nothing to commit."
            exit 0
          fi
          git commit -m "report(skywire): vitals + integration — ${DATE}" \
                      -m "Artifacts: sanitized JSON, daily MD, Sigma analysis."
          BR="${GITHUB_REF_NAME:-main}"
          git pull --rebase --autostash origin "$BR" || true
          git push origin HEAD:"$BR"
