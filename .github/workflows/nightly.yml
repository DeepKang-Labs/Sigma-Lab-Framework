name: nightly

on:
  schedule:
    - cron: "0 3 * * *"   # every day at 03:00 UTC
  workflow_dispatch:

jobs:
  nightly-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest simpleeval

      - name: Create required folders
        run: |
          mkdir -p pilots/validation_logs
          mkdir -p discovery

      - name: Create demo discovery data (safe fallback)
        shell: bash
        run: |
          if [ ! -f discovery/decision_mapper.yaml ]; then
            echo 'version: "1.0"' > discovery/decision_mapper.yaml
            echo 'discovery_date: "2025-10-25"' >> discovery/decision_mapper.yaml
            echo 'decision_points:' >> discovery/decision_mapper.yaml
            echo '  - decision_id: "dp_demo_ci"' >> discovery/decision_mapper.yaml
            echo '    description: "CI demo decision for nightly"' >> discovery/decision_mapper.yaml
            echo '    stakeholders: ["end_users", "core_devs"]' >> discovery/decision_mapper.yaml
            echo '    governance_dimensions:' >> discovery/decision_mapper.yaml
            echo '      technical_complexity: 5' >> discovery/decision_mapper.yaml
            echo '      economic_impact: 4' >> discovery/decision_mapper.yaml
            echo '      user_experience_impact: 6' >> discovery/decision_mapper.yaml
            echo '      security_implications: 3' >> discovery/decision_mapper.yaml
            echo '      current_pain_level: 5' >> discovery/decision_mapper.yaml
          fi

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Run unit tests (core + bridge)
        run: python -m pytest -q

      - name: Bridge • validate-only (Skywire)
        run: |
          PYTHONPATH=$PWD python -m network_bridge.run_network_integrated \
            --network skywire \
            --discovery ./discovery \
            --mappings ./network_bridge/mappings_skywire.yaml \
            --config ./sigma_config_placeholder.yaml \
            --out ./pilots/validation_logs/skywire_validate_only.json \
            --validate-only \
            --formula-eval auto

      - name: Bridge • validate-only (Fiber)
        run: |
          PYTHONPATH=$PWD python -m network_bridge.run_network_integrated \
            --network fiber \
            --discovery ./discovery \
            --mappings ./network_bridge/mappings_fiber.yaml \
            --config ./sigma_config_placeholder.yaml \
            --out ./pilots/validation_logs/fiber_validate_only.json \
            --validate-only \
            --formula-eval auto

      - name: Tools • mesh_memory_append
        shell: bash
        run: |
          REPORT=./pilots/validation_logs/skywire_validate_only.json
          MEMORY=./pilots/validation_logs/mesh_memory.json
          if [ -f "$REPORT" ]; then
            PYTHONPATH=$PWD python -m tools.mesh_memory_append \
              --report "$REPORT" \
              --memory "$MEMORY"
          else
            echo "Report not found: $REPORT"
            ls -la ./pilots/validation_logs || true
            exit 1
          fi

      - name: Tools • priority_matrix_from_mappings
        shell: bash
        run: |
          MAP=./network_bridge/mappings_skywire.yaml
          OUT=./pilots/validation_logs/priority_matrix_report.json
          if [ -f "$MAP" ]; then
            PYTHONPATH=$PWD python -m tools.priority_matrix_from_mappings \
              --mappings "$MAP" \
              --out "$OUT"
          else
            echo "Mappings not found: $MAP"
            exit 1
          fi
