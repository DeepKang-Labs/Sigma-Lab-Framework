name: Sigma Node (Smoke Test)

on:
  workflow_dispatch:

jobs:
  smoke:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: Date (UTC)
        id: date
        run: echo "date=$(date -u +%Y-%m-%d)" >> "$GITHUB_OUTPUT"

      - name: Prepare folders
        env:
          ARTIFACTS_ROOT: artifacts
        run: |
          set -euo pipefail
          mkdir -p "$ARTIFACTS_ROOT/heartbeat"
          mkdir -p "$ARTIFACTS_ROOT/mesh/inbox"
          mkdir -p "$ARTIFACTS_ROOT/mesh/outbox"
          mkdir -p "$ARTIFACTS_ROOT/mesh/archive"
          mkdir -p "$ARTIFACTS_ROOT/model"

      - name: Initialize local model (zero-weights)
        env:
          ARTIFACTS_ROOT: artifacts
        run: |
          set -euo pipefail
          MODEL="$ARTIFACTS_ROOT/model/local_model.json"
          if [ ! -f "$MODEL" ]; then
            cat > "$MODEL" <<'JSON'
{
  "version": "0.1.0",
  "updated_at": null,
  "weights": {
    "latency_mean_ms": 0.0,
    "availability_score": 0.0,
    "transport_density": 0.0
  }
}
JSON
            echo "Created zeroed model: $MODEL"
          else
            echo "Model already exists: $MODEL"
          fi

      - name: Run Sigma Node (HTTP ping mode)
        env:
          ARTIFACTS_ROOT: artifacts
        run: |
          set -euo pipefail
          export PYTHONPATH="$PWD"
          python scripts/sigma_node.py

      - name: Mesh | Federate (produce delta)
        env:
          ARTIFACTS_ROOT: artifacts
        run: |
          set -euo pipefail
          export PYTHONPATH="$PWD"
          python scripts/mesh_federate.py

      - name: Mesh | Apply (consume inbox)
        env:
          ARTIFACTS_ROOT: artifacts
        run: |
          set -euo pipefail
          export PYTHONPATH="$PWD"
          python scripts/mesh_apply.py

      - name: Build manifest (récap des artefacts)
        env:
          ARTIFACTS_ROOT: artifacts
        run: |
          set -euo pipefail
          export PYTHONPATH="$PWD"
          python scripts/build_manifest.py

      - name: Upload — manifest
        uses: actions/upload-artifact@v4
        with:
          name: sigma_manifest_${{ steps.date.outputs.date }}
          path: artifacts/manifest.json
          if-no-files-found: warn
          retention-days: 7

      - name: Upload — data day
        uses: actions/upload-artifact@v4
        with:
          name: sigma_data_${{ steps.date.outputs.date }}
          path: artifacts/model/local_model.json
          if-no-files-found: warn
          retention-days: 7
