name: Skywire / VitalSigns + Sigma Integration

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  vitals:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install minimal deps
        run: |
          python -m pip install -U pip
          pip install "pandas>=2.0" "matplotlib>=3.7" "requests>=2.31"

      - name: Date stamp (UTC)
        id: date
        run: echo "date=$(date -u +%F)" >> "$GITHUB_OUTPUT"

      - name: Prepare folders
        run: |
          set -euo pipefail
          DATE="${{ steps.date.outputs.date }}"
          mkdir -p "data/${DATE}" "reports/${DATE}" reports/latest artifacts/raw artifacts/sanitized .tmp

      - name: Safe defaults for discovery
        run: |
          set -euo pipefail
          printf "036a...dummyA\n047b...dummyB\n" > .tmp/visors_pks.txt

      # 1) Run VitalSigns (JSON + quick MD) avec fallback YAML-safe
      - name: Run VitalSigns (produce JSON)
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          OUT_JSON="data/${DATE}/skywire_vitals.json"
          OUT_MD="data/${DATE}/skywire_summary.md"
          if [ -f scripts/skywire_vitals.py ]; then
            echo "‚úÖ Using scripts/skywire_vitals.py"
            python scripts/skywire_vitals.py --out "$OUT_JSON" --summary "$OUT_MD"
          else
            echo "‚ö†Ô∏è Fallback VitalSigns (inline)"
            python - <<'PY'
import os, json, datetime, pathlib
d=os.environ.get('DATE','unknown')
out_json=f"data/{d}/skywire_vitals.json"
out_md=f"data/{d}/skywire_summary.md"
payload={"date_utc":d,"meta":{"source":"fallback","repo":"Sigma-Lab-Framework"},
         "groups":["explorer","public"],
         "payloads":[{"visor":"demo","ok":True,"latency_ms":42.0,"uptime_ratio":0.997,"peers":12}]}
pathlib.Path(os.path.dirname(out_json)).mkdir(parents=True, exist_ok=True)
with open(out_json,"w",encoding="utf-8") as f: json.dump(payload,f,ensure_ascii=False,indent=2)
with open(out_md,"w",encoding="utf-8") as f:
    f.write(f"# Skywire VitalSigns (fallback) ‚Äî {d}\n\n")
    f.write(f"- generated: {datetime.datetime.utcnow().isoformat()}Z\n")
    f.write(f"- items: {len(payload.get('payloads',[]))}\n")
PY
          fi

      - name: Upload RAW JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_raw_${{ steps.date.outputs.date }}
          path: data/${{ steps.date.outputs.date }}/skywire_vitals.json
          if-no-files-found: error
          retention-days: 7

      # 2) Sanitize + quick report (auto pandas/mpl si dispo, sinon fallback)
      - name: Sanitize JSON (private ‚Üí public-safe) + generate quick report
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          IN="data/${DATE}/skywire_vitals.json"
          OUT_SAN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT_MD="reports/${DATE}/skywire_vital_report.md"

          # pandas dispo ?
          if python - <<'PY'; then
import importlib.util, sys
sys.exit(0 if importlib.util.find_spec('pandas') else 1)
PY
          then
            echo "‚úÖ Using official reporter (pandas/matplotlib)"
            if [ -f scripts/skywire_vital_report.py ]; then
              python scripts/skywire_vital_report.py --in "$IN" --out "$OUT_SAN" --md "$OUT_MD"
            else
              echo "‚ö†Ô∏è Reporter script absent ‚Äî fallback light"
              python - <<'PY'
import json, os, pathlib, datetime as dt
d=os.environ.get('DATE','unknown')
inp=f"data/{d}/skywire_vitals.json"
out_json=f"reports/{d}/skywire_vitals_sanitized.json"
out_md=f"reports/{d}/skywire_vital_report.md"
pathlib.Path(os.path.dirname(out_json)).mkdir(parents=True, exist_ok=True)
with open(inp,"r",encoding="utf-8") as f: data=json.load(f)
for k in ("ip","public_key","debug"):
    if isinstance(data,dict) and k in data: data.pop(k,None)
with open(out_json,"w",encoding="utf-8") as f: json.dump(data,f,ensure_ascii=False,indent=2)
with open(out_md,"w",encoding="utf-8") as f:
    f.write("# Skywire Vital Report (fallback)\n\n")
    f.write(f"- generated: {dt.datetime.utcnow().isoformat()}Z\n")
    f.write(f"- top-level keys: {len(list(data.keys())) if isinstance(data,dict) else 'n/a'}\n")
PY
            fi
          else
            echo "ü™∂ Using lightweight fallback reporter (no pandas)"
            python - <<'PY'
import json, os, pathlib, datetime as dt
d=os.environ.get('DATE','unknown')
inp=f"data/{d}/skywire_vitals.json"
out_json=f"reports/{d}/skywire_vitals_sanitized.json"
out_md=f"reports/{d}/skywire_vital_report.md"
pathlib.Path(os.path.dirname(out_json)).mkdir(parents=True, exist_ok=True)
with open(inp,"r",encoding="utf-8") as f: data=json.load(f)
for k in ("ip","public_key","debug"):
    if isinstance(data,dict) and k in data: data.pop(k,None)
with open(out_json,"w",encoding="utf-8") as f: json.dump(data,f,ensure_ascii=False,indent=2)
with open(out_md,"w",encoding="utf-8") as f:
    f.write("# Skywire Vital Report (light)\n\n")
    f.write(f"- generated: {dt.datetime.utcnow().isoformat()}Z\n")
    f.write(f"- top-level keys: {len(list(data.keys())) if isinstance(data,dict) else 'n/a'}\n")
PY
          fi

          # latest pointers
          ln -sf "../${DATE}/skywire_vitals_sanitized.json" reports/latest/skywire_vitals_sanitized.json
          ln -sf "../${DATE}/skywire_vital_report.md"        reports/latest/skywire_vital_report.md

      - name: Upload SANITIZED JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_sanitized_${{ steps.date.outputs.date }}
          path: |
            reports/${{ steps.date.outputs.date }}/skywire_vitals_sanitized.json
            reports/${{ steps.date.outputs.date }}/skywire_vital_report.md
          if-no-files-found: error
          retention-days: 7

      # 3) Sigma Analyzer (badge + r√©sum√© + JSON)
      - name: Run Sigma Anomaly Check
        run: |
          set -euo pipefail
          DATE="${{ steps.date.outputs.date }}"
          INP="data/${DATE}/skywire_vitals.json"
          OUT_JSON="reports/${DATE}/skywire_sigma_analysis_${DATE}.json"
          BADGE_DIR="reports/${DATE}/badges"
          BADGE="${BADGE_DIR}/sigma_status.svg"
          SUMMARY="reports/${DATE}/integration_summary_${DATE}.md"
          mkdir -p "${BADGE_DIR}"
          python scripts/sigma_anomaly_check.py \
            --in "${INP}" \
            --out-json "${OUT_JSON}" \
            --badge "${BADGE}" \
            --summary "${SUMMARY}"
          ln -sf "../${DATE}/integration_summary_${DATE}.md" reports/latest/integration_summary.md
          ln -sf "../${DATE}/badges/sigma_status.svg"        reports/latest/sigma_status.svg

      - name: Upload Integration Reports (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: integration_reports_${{ steps.date.outputs.date }}
          path: |
            reports/${{ steps.date.outputs.date }}/integration_summary_*.md
            reports/${{ steps.date.outputs.date }}/skywire_sigma_analysis_*.json
            reports/${{ steps.date.outputs.date }}/badges/*.svg
          if-no-files-found: error
          retention-days: 7

      # 4) Commit & push robustes (√©vite ‚Äúunstaged changes‚Äù)
      - name: Commit & push reports
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          git config user.name  "Sigma Bot"
          git config user.email "bot@sigma.local"

          # Stage & stash pour √©viter le blocage du rebase
          git add -A || true
          git stash push -m "ci-stash-${DATE}" || true

          # Mettre √† jour main et r√©appliquer nos modifs
          git pull --rebase || true
          git stash pop || true
          git add -A

          git commit -m "report(skywire): vitals + sigma check ‚Äî ${DATE}" || true
          git push || true
