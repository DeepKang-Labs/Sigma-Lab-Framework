name: Skywire / VitalSigns + Sigma Integration

on:
  workflow_dispatch: {}
  schedule:
    - cron: "17 0 * * *"

permissions:
  contents: write
  actions: read

jobs:
  vitals:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: Date stamp (UTC)
        id: date
        run: echo "date=$(date -u +%Y-%m-%d)" >> "$GITHUB_OUTPUT"

      - name: Prepare folders
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          mkdir -p "data/${DATE}" "reports/${DATE}" "reports/latest"
          mkdir -p artifacts/raw artifacts/sanitized .tmp

      - name: Define endpoints env (auto-discovery safe defaults)
        run: |
          set -euo pipefail
          [ -f .tmp/visors_pks.txt ] || printf "036a...dummyA\n047b...dummyB\n" > .tmp/visors_pks.txt

      - name: Run VitalSigns (produce JSON)
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          OUT_JSON="data/${DATE}/skywire_vitals.json"
          OUT_MD="data/${DATE}/skywire_summary.md"
          if [ -f scripts/skywire_vitals.py ]; then
            python scripts/skywire_vitals.py --out "$OUT_JSON" --summary "$OUT_MD"
          else
            python scripts/fallback_vitals.py
          fi
          cp "data/${DATE}/skywire_vitals.json" "artifacts/raw/skywire_vitals_${DATE}.json"

      - name: Upload RAW JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_raw_${{ steps.date.outputs.date }}
          path: artifacts/raw/*
          if-no-files-found: error
          retention-days: 7

      - name: Sanitize JSON (private → public-safe) + generate quick report
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          IN="data/${DATE}/skywire_vitals.json"
          OUT_SAN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT_MD="reports/${DATE}/skywire_vital_report.md"
          if [ -f scripts/skywire_vital_report.py ]; then
            python scripts/skywire_vital_report.py --in "$IN" --out "$OUT_SAN" --md "$OUT_MD"
          else
            python scripts/fallback_sanitize.py
          fi
          cp "$OUT_SAN" "artifacts/sanitized/skywire_vitals_${DATE}_sanitized.json"
          cp "$OUT_MD"  "reports/latest/skywire_vital_report.md"
          cp "$OUT_SAN" "reports/latest/skywire_vitals_sanitized.json"

      - name: Upload SANITIZED JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_sanitized_${{ steps.date.outputs.date }}
          path: |
            artifacts/sanitized/*
            reports/${{ steps.date.outputs.date }}/skywire_vital_report.md
          if-no-files-found: error
          retention-days: 7

      - name: Make engine importable (package + PYTHONPATH)
        run: echo "PYTHONPATH=$PWD" >> "$GITHUB_ENV"

      - name: Run Integration (Skywire → Sigma) + reports
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          python scripts/fallback_sigma_integration.py
          cp "reports/${DATE}/skywire_sigma_analysis.json" "reports/latest/skywire_sigma_analysis.json"
          cp "reports/${DATE}/skywire_sigma_summary.md"   "reports/latest/skywire_sigma_summary.md"

      - name: Upload Integration Reports (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_sigma_integration_${{ steps.date.outputs.date }}
          path: |
            reports/${{ steps.date.outputs.date }}/*
            reports/latest/*
          if-no-files-found: error
          retention-days: 7

      - name: Commit & push reports
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "reports/${DATE}" "reports/latest" || true
          if ! git diff --cached --quiet; then
            git commit -m "chore(reports): Skywire + Sigma for ${DATE}"
            git push
          else
            echo "No report changes to commit."
          fi
