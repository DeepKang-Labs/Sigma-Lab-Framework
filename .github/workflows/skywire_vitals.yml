name: Skywire VitalSigns

on:
  workflow_dispatch:
  schedule:
    # Runs daily at 05:55 UTC
    - cron: "55 5 * * *"

jobs:
  vitals:
    runs-on: ubuntu-latest

    permissions:
      contents: write    # to push the summary markdown
      actions: read
      checks: read

    env:
      # Defaults (can be overridden by repo/organization secrets)
      UT_MAX_VISORS: "200"              # cap for probes
      UT_SAMPLE_MODE: "random"
      PYTHONUNBUFFERED: "1"

      # Public endpoints
      SKYWIRE_ENDPOINTS: >
        https://explorer.skycoin.com/api/blockchain/metadata,
        https://explorer.skycoin.com/api/coinSupply
      SKYWIRE_PUBLIC_ENDPOINTS: >
        https://sd.skycoin.com/api/services?type=visor,
        https://sd.skycoin.com/api/services?type=proxy,
        https://sd.skycoin.com/api/services?type=vpn,
        https://tpd.skywire.skycoin.com/all-transports,
        https://dmsgd.skywire.skycoin.com/dmsg-discovery/entries,
        https://rf.skywire.skycoin.com/
      FIBER_ENDPOINTS: >
        https://fiber.skywire.dev/api/status,
        https://fiber.skywire.dev/api/metrics

    steps:
      - name: Checkout (full history, with token)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          set -euo pipefail
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Ensure mandatory libs are present
          python - <<'PY'
          import subprocess, sys
          def ensure(pkg):
              try:
                  __import__(pkg)
              except Exception:
                  subprocess.check_call([sys.executable, "-m", "pip", "install", pkg])
          for p in ("requests","PyYAML"):
              ensure(p)
          PY

      - name: Date stamp (UTC)
        id: date
        run: echo "today=$(date -u +%F)" >> "$GITHUB_OUTPUT"

      - name: Define endpoints env
        run: |
          echo "TODAY=${{ steps.date.outputs.today }}" >> "$GITHUB_ENV"
          # Trim spaces and store lists as comma-separated strings
          for k in SKYWIRE_ENDPOINTS SKYWIRE_PUBLIC_ENDPOINTS FIBER_ENDPOINTS; do
            v="$(echo "${!k}" | tr -d '\n' | sed 's/[[:space:]]//g')"
            echo "$k=$v" >> "$GITHUB_ENV"
          done

      # ---------- AUTO-DISCOVERY OF PUBLIC VISOR PKs (lightweight) ----------
      - name: Fetch public visors PKs (auto-discovery)
        id: autodiscover
        env:
          PUBLIC_SD: "https://sd.skycoin.com/api/services?type=visor"
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, json, requests, sys
          url = os.environ.get("PUBLIC_SD","")
          pks=set()
          try:
              r = requests.get(url, timeout=20)
              r.raise_for_status()
              data = r.json()
              for it in data if isinstance(data,list) else data.get("data",[]):
                  # entries often under "address" or "pk"
                  addr = (it.get("address") or it.get("pk") or "").strip()
                  if addr:
                      pks.add(addr)
          except Exception as e:
              print(f"[warn] auto-discovery failed: {e}", file=sys.stderr)
          # Output as comma list for next step
          out = ",".join(sorted(pks))
          with open(os.environ.get("GITHUB_OUTPUT"),"a") as f:
              f.write(f"auto_pks={out}\n")
          PY

      # ---------- MERGE (SECRETS + AUTO) INTO A FILE (Option A) ----------
      - name: Normalize env (save PKs to file instead of env)
        env:
          SECRET_VISORS_PKS: ${{ secrets.VISORS_PKS }}
        run: |
          set -euo pipefail
          mkdir -p .tmp
          AUTO="${{ steps.autodiscover.outputs.auto_pks }}"
          MERGED="$(printf "%s,%s\n" "${SECRET_VISORS_PKS:-}" "${AUTO:-}" \
                   | tr ',' '\n' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//' \
                   | grep -E '^[0-9a-fA-F:]{10,}$' || true)"
          echo "$MERGED" | sort -u > .tmp/visors_pks.txt
          echo "VISORS_PKS_FILE=.tmp/visors_pks.txt" >> "$GITHUB_ENV"

      - name: Debug env
        run: |
          echo "TODAY=${TODAY}"
          echo "UT_MAX_VISORS=${UT_MAX_VISORS}"
          echo "VISORS_PKS_FILE=${VISORS_PKS_FILE}"
          test -f "${VISORS_PKS_FILE}" && echo "PKs count: $(wc -l < ${VISORS_PKS_FILE})" || echo "PKs file missing"

      # ---------- MAIN SCRIPT ----------
      - name: Run VitalSigns (produce JSON + Markdown)
        env:
          TODAY: ${{ steps.date.outputs.today }}
          SKYWIRE_ENDPOINTS: ${{ env.SKYWIRE_ENDPOINTS }}
          SKYWIRE_PUBLIC_ENDPOINTS: ${{ env.SKYWIRE_PUBLIC_ENDPOINTS }}
          FIBER_ENDPOINTS: ${{ env.FIBER_ENDPOINTS }}
          VISORS_PKS_FILE: ${{ env.VISORS_PKS_FILE }}
          UT_MAX_VISORS: ${{ env.UT_MAX_VISORS }}
          UT_SAMPLE_MODE: ${{ env.UT_SAMPLE_MODE }}
        run: |
          set -euo pipefail
          mkdir -p "data/${TODAY}"
          # The script must accept optional --visors-file
          python scripts/skywire_vitals.py \
            --visors-file "${VISORS_PKS_FILE}" || exit 1
          echo "Wrote: data/${TODAY}/skywire_vitals.json and data/${TODAY}/skywire_summary.md"

      # ---------- PRIVATE ARTIFACT (RAW JSON) ----------
      - name: Upload RAW JSON (private artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: skywire_vitals_raw_${{ steps.date.outputs.today }}
          path: data/${{ steps.date.outputs.today }}/skywire_vitals.json
          if-no-files-found: warn
          retention-days: 14

      # ---------- SANITIZE JSON (remove sensitive details before any publish) ----------
      - name: Sanitize JSON (remove sensitive data)
        env:
          TODAY: ${{ steps.date.outputs.today }}
        run: |
          set -euo pipefail
          cat > sanitize.py <<'PY'
          import os, json, sys
          today = os.environ.get("TODAY")
          p = f"data/{today}/skywire_vitals.json"
          q = f"data/{today}/skywire_vitals_sanitized.json"
          try:
              with open(p,"r") as f:
                  doc = json.load(f)
          except FileNotFoundError:
              print("No raw JSON found; skipping sanitize.")
              sys.exit(0)

          for g in doc.get("groups", []):
              # Public: compress 'samples' to counts and remove payload details
              if g.get("name") == "public":
                  s = g.get("summary", {}) or {}
                  samples = s.get("samples", {}) or {}
                  if isinstance(samples, dict):
                      for k,v in list(samples.items()):
                          if isinstance(v, list):
                              samples[k] = len(v)
                      s["samples"] = samples
                      g["summary"] = s
                  payloads = g.get("payloads", []) or []
                  for it in payloads:
                      for k in list(it.keys()):
                          if k not in ("__url__", "__ok__", "__status__"):
                              del it[k]
              # Nodes: never publish actual PK list
              if g.get("name") == "nodes":
                  g["visors_pks"] = []
                  s = g.get("summary", {}) or {}
                  if "ut_note" in s:
                      s["ut_note"] = "(redacted)"
                  g["summary"] = s

          with open(q,"w") as f:
              json.dump(doc, f, indent=2, ensure_ascii=False)
          print(f"Sanitized written: {q}")
          PY
          python sanitize.py

      - name: Upload SANITIZED JSON (private artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: skywire_vitals_sanitized_${{ steps.date.outputs.today }}
          path: data/${{ steps.date.outputs.today }}/skywire_vitals_sanitized.json
          if-no-files-found: warn
          retention-days: 14

      # ---------- COMMIT SUMMARY (MARKDOWN ONLY) ----------
      - name: Commit & push summary (rebase-safe)
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: |
            chore(data): Skywire VitalSigns daily snapshot
          file_pattern: |
            data/${{ steps.date.outputs.today }}/skywire_summary.md
          branch: ${{ github.ref_name }}
