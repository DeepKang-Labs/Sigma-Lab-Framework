name: Skywire / VitalSigns + Sigma Integration

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  vitals:
    runs-on: ubuntu-latest

    steps:
      # 0) Checkout (fetch-depth 0 pour pouvoir rebaser/pusher)
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 1) Python + deps
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install minimal deps
        run: |
          set -euo pipefail
          python -m pip install -U pip
          pip install "requests>=2.31" "pandas>=2.0" "matplotlib>=3.7"

      # 2) Date UTC
      - name: Date stamp (UTC)
        id: date
        run: echo "date=$(date -u +%F)" >> "$GITHUB_OUTPUT"

      # 3) Dossiers
      - name: Prepare folders
        run: |
          set -euo pipefail
          DATE="${{ steps.date.outputs.date }}"
          mkdir -p "data/${DATE}" "reports/${DATE}" reports/latest artifacts/raw artifacts/sanitized .tmp

      # 4) Valeurs s√ªres (placeholder auto-discovery)
      - name: Safe defaults for discovery
        run: |
          set -euo pipefail
          printf "036a...dummyA\n047b...dummyB\n" > .tmp/visors_pks.txt

      # 5) VitalSigns (script si pr√©sent, sinon fallback YAML-safe sans heredoc)
      - name: Run VitalSigns (produce JSON)
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          OUT_JSON="data/${DATE}/skywire_vitals.json"
          OUT_MD="data/${DATE}/skywire_summary.md"

          if [ -f scripts/skywire_vitals.py ]; then
            echo "‚úÖ Using scripts/skywire_vitals.py"
            python scripts/skywire_vitals.py --out "$OUT_JSON" --summary "$OUT_MD"
          else
            echo "‚ö†Ô∏è Fallback VitalSigns (inline, no heredoc)"
            TMP=.tmp/fallback_vitals.py
            : > "$TMP"
            printf '%s\n' \
              'import os, json, datetime, pathlib' \
              'd = os.environ.get("DATE", "unknown")' \
              'out_json = f"data/{d}/skywire_vitals.json"' \
              'out_md   = f"data/{d}/skywire_summary.md"' \
              'payload = {' \
              '  "date_utc": d,' \
              '  "meta": {"source": "fallback", "repo": "Sigma-Lab-Framework"},' \
              '  "groups": ["explorer","public"],' \
              '  "payloads": [{"visor":"demo","ok": True,"latency_ms": 42.0}]' \
              '}' \
              'pathlib.Path(os.path.dirname(out_json)).mkdir(parents=True, exist_ok=True)' \
              'with open(out_json, "w", encoding="utf-8") as f:' \
              '    json.dump(payload, f, ensure_ascii=False, indent=2)' \
              'with open(out_md, "w", encoding="utf-8") as f:' \
              '    f.write(f"# Skywire VitalSigns (fallback) ‚Äî {d}\n\n")' \
              '    f.write(f"- generated: {datetime.datetime.utcnow().isoformat()}Z\n")' \
              '    f.write(f"- items: {len(payload.get(\"payloads\",[]))}\n")' \
              > "$TMP"
            python "$TMP"
          fi

      # 6) Artefact RAW
      - name: Upload RAW JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_raw_${{ steps.date.outputs.date }}
          path: data/${{ steps.date.outputs.date }}/skywire_vitals.json
          if-no-files-found: error
          retention-days: 7

      # 7) Sanitize + quick report (officiel si dispo, sinon fallback sans heredoc)
      - name: Sanitize JSON (private ‚Üí public-safe) + generate quick report
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          IN="data/${DATE}/skywire_vitals.json"
          OUT_SAN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT_MD="reports/${DATE}/skywire_vital_report.md"
          mkdir -p "reports/${DATE}"

          if [ -f scripts/skywire_vital_report.py ]; then
            echo "üß™ Using official reporter (pandas/matplotlib)"
            python scripts/skywire_vital_report.py --in "$IN" --out "$OUT_SAN" --md "$OUT_MD"
          else
            echo "‚ö†Ô∏è Using lightweight fallback reporter"
            TMP=.tmp/fallback_sanitize.py
            : > "$TMP"
            printf '%s\n' \
              'import os, json, pathlib, datetime' \
              'd = os.environ.get("DATE","unknown")' \
              'inp = f"data/{d}/skywire_vitals.json"' \
              'out_json = f"reports/{d}/skywire_vitals_sanitized.json"' \
              'out_md   = f"reports/{d}/skywire_vital_report.md"' \
              'pathlib.Path(os.path.dirname(out_json)).mkdir(parents=True, exist_ok=True)' \
              'with open(inp,"r",encoding="utf-8") as f:' \
              '    data = json.load(f)' \
              'for k in ("ip","public_key","debug"):' \
              '    if isinstance(data, dict) and k in data:' \
              '        data.pop(k, None)' \
              'with open(out_json,"w",encoding="utf-8") as f:' \
              '    json.dump(data,f,ensure_ascii=False,indent=2)' \
              'md = [' \
              '  f"# Skywire Vital Report ({d})",' \
              '  "",' \
              '  f"- generated: {datetime.datetime.utcnow().isoformat()}Z",' \
              '  f"- top-level keys: {len(list(data.keys())) if isinstance(data, dict) else ''n/a''}",' \
              '  "",' \
              '  "This is an auto-generated minimal report."' \
              ']' \
              'with open(out_md,"w",encoding="utf-8") as f:' \
              '    f.write("\n".join(md))' \
              > "$TMP"
            python "$TMP"
          fi

      # 8) Artefact SANITIZED
      - name: Upload SANITIZED JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_sanitized_${{ steps.date.outputs.date }}
          path: reports/${{ steps.date.outputs.date }}/skywire_vitals_sanitized.json
          if-no-files-found: error
          retention-days: 7

      # 9) Importabilit√© √©ventuelle du moteur local
      - name: Make engine importable (package + PYTHONPATH)
        run: |
          set -euo pipefail
          if [ -f engine/__init__.py ]; then
            echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
          fi

      # 10) Int√©gration (scripts pr√©sents ‚Üí sinon fallback no-op)
      - name: Run Integration (Skywire ‚Üí Sigma) + reports
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          IN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT="reports/${DATE}/skywire_sigma_analysis.json"
          OUT_SUM="reports/${DATE}/integration_summary_${DATE}.md"
          mkdir -p "reports/${DATE}" reports/latest

          if [ -f scripts/integration_bridge.py ]; then
            echo "üîó Using scripts/integration_bridge.py"
            python scripts/integration_bridge.py --in "$IN" --out "$OUT" --summary "$OUT_SUM"
          elif [ -f engine/sigma_analyzer.py ]; then
            echo "üß† Using engine/sigma_analyzer.py"
            python -m engine.sigma_analyzer --in "$IN" --out "$OUT" --summary "$OUT_SUM" || true
          else
            echo "‚ÑπÔ∏è Integration fallback (no-op summary)"
            echo "# Sigma Integration\n\n- date: ${DATE}\n- status: fallback\n" > "$OUT_SUM"
            echo '{}' > "$OUT"
          fi

          ln -sf "../${DATE}/integration_summary_${DATE}.md" reports/latest/integration_summary.md
          ln -sf "../${DATE}/skywire_vitals_sanitized.json" reports/latest/skywire_vitals_sanitized.json

      - name: Upload Integration Reports (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: integration_reports_${{ steps.date.outputs.date }}
          path: |
            reports/${{ steps.date.outputs.date }}/integration_summary_${{ steps.date.outputs.date }}.md
            reports/${{ steps.date.outputs.date }}/skywire_sigma_analysis.json
          if-no-files-found: error
          retention-days: 7

      # 11) Commit & push r√©silient (stash -u / rebase / pop)
      - name: Commit & push reports
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          git config user.name  "Sigma Bot"
          git config user.email "bot@sigma.local"

          # On ajoute uniquement ce qui nous int√©resse
          git add -A reports/ data/${DATE}/skywire_summary.md data/${DATE}/skywire_vitals.json || true

          # Si rien √† committer, on sort
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          # √âvite "cannot rebase: You have unstaged changes"
          git stash push -u -m "ci-stash-${DATE}" || true
          git pull --rebase || true
          git stash pop || true

          git add -A
          git commit -m "report(skywire): vitals + integration ‚Äî ${DATE}" || true
          git push || true
