name: Skywire → Sigma | Vitals, Sanitize, Analyze, Report

on:
  workflow_dispatch:
  schedule:
    - cron: "7 0 * * *"   # daily @ 00:07 UTC

jobs:
  vitals-and-analysis:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # --- Setup -------------------------------------------------------------
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install requests pyyaml
          fi
          # Optional: make local package importable
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            pip install -e .
          fi

      - name: Date stamp (UTC)
        id: date
        run: echo "date=$(date -u +%Y-%m-%d)" >> "$GITHUB_OUTPUT"

      - name: Prepare folders
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          mkdir -p data/"$DATE" reports/"$DATE" reports/latest
          mkdir -p artifacts/raw artifacts/public .tmp

      # --- VitalSigns capture ------------------------------------------------
      - name: Define endpoints env (auto-discovery safe defaults)
        run: |
          set -euo pipefail
          : > .tmp/visors_pks.txt

      - name: Run VitalSigns (produce JSON)
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          OUT_JSON="data/${DATE}/skywire_vitals.json"
          OUT_SUMMARY="data/${DATE}/skywire_summary.md"

          if [ -f scripts/skywire_vitals.py ]; then
            python scripts/skywire_vitals.py \
              --out "$OUT_JSON" \
              --summary "$OUT_SUMMARY" || {
                echo "⚠️ skywire_vitals.py returned non-zero; continuing for visibility."
              }
          else
            echo "❌ scripts/skywire_vitals.py not found"; exit 1
          fi

          # Mirror raw to artifacts for easy download
          cp "$OUT_JSON" "artifacts/raw/skywire_vitals_${DATE}.json"

      - name: Upload RAW JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_raw_${{ steps.date.outputs.date }}
          path: artifacts/raw/*
          if-no-files-found: error
          retention-days: 7

      # --- Sanitize + quick report ------------------------------------------
      - name: Sanitize JSON (private → public-safe) + generate quick report
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          IN="data/${DATE}/skywire_vitals.json"
          OUT_SAN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT_MD="reports/${DATE}/skywire_vital_report.md"

          if [ -f scripts/skywire_vital_report.py ]; then
            # Preferred reporter if present
            python scripts/skywire_vital_report.py --in "$IN" --out "$OUT_SAN" --md "$OUT_MD"
          else
            # Robust fallback via temp script (avoids YAML heredoc parsing issues)
            cat > .tmp/fallback_sanitize.py <<'PY'
import os, json, datetime, pathlib, sys
date = os.environ.get('DATE', 'unknown')
inp = f"data/{date}/skywire_vitals.json"
out_json = f"reports/{date}/skywire_vitals_sanitized.json"
out_md = f"reports/{date}/skywire_vital_report.md"

pathlib.Path(os.path.dirname(out_json)).mkdir(parents=True, exist_ok=True)

with open(inp, "r", encoding="utf-8") as f:
    data = json.load(f)

# Light sanitize: drop sensitive-ish keys if present at top-level
if isinstance(data, dict):
    for k in ("ip", "public_key", "debug"):
        data.pop(k, None)

with open(out_json, "w", encoding="utf-8") as f:
    json.dump(data, f, ensure_ascii=False, indent=2)

md = [
  f"# Skywire Vital Report ({date})",
  "",
  f"- Generated: {datetime.datetime.utcnow().isoformat()}Z",
  f"- Fields: {len(data) if hasattr(data, '__len__') else 'n/a'}",
  "",
  "This is an auto-generated minimal report."
]
with open(out_md, "w", encoding="utf-8") as f:
  f.write("\n".join(md))
PY
            python .tmp/fallback_sanitize.py
          fi

          # Update "latest" pointers and artifacts
          cp "reports/${DATE}/skywire_vitals_sanitized.json" "reports/latest/skywire_vitals_sanitized.json"
          cp "reports/${DATE}/skywire_vital_report.md" "reports/latest/skywire_vital_report.md"
          cp "data/${DATE}/skywire_vitals.json" "reports/latest/skywire_vitals_raw.json" || true
          cp "reports/${DATE}/skywire_vitals_sanitized.json" artifacts/public/
          cp "reports/${DATE}/skywire_vital_report.md" artifacts/public/

      - name: Upload SANITIZED + REPORT (artifacts)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_public_${{ steps.date.outputs.date }}
          path: |
            artifacts/public/*
            reports/${{ steps.date.outputs.date }}/*.md
          if-no-files-found: error
          retention-days: 14

      # --- Sigma analysis (close the loop) ----------------------------------
      - name: Make engine importable (package + PYTHONPATH)
        run: |
          set -euo pipefail
          export PYTHONPATH="$PWD"
          echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV

      - name: Run Integration (Skywire → Sigma) + reports
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          export PYTHONPATH="$PWD"
          IN_DIR="data/${DATE}"
          OUT_JSON="reports/${DATE}/skywire_sigma_analysis_${DATE}.json"
          OUT_MD="reports/${DATE}/integration_report.md"

          if [ -f network_bridge/run_network_integrated.py ]; then
            python network_bridge/run_network_integrated.py \
              --network skywire \
              --discovery "$IN_DIR" \
              --out "$OUT_JSON" \
              --write-md "$OUT_MD"
          else
            echo "❌ network_bridge/run_network_integrated.py not found"; exit 1
          fi

          cp "$OUT_JSON" artifacts/public/ || true
          cp "$OUT_MD" artifacts/public/ || true
          cp "$OUT_JSON" "reports/latest/skywire_sigma_analysis.json" || true
          cp "$OUT_MD" "reports/latest/integration_report.md" || true

      - name: Upload Integration Reports (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: sigma_integration_${{ steps.date.outputs.date }}
          path: |
            reports/${{ steps.date.outputs.date }}/*
            reports/latest/*
            artifacts/public/*
          if-no-files-found: error
          retention-days: 14

      # --- Optional commit of reports ---------------------------------------
      - name: Commit & push reports
        if: ${{ github.event_name != 'pull_request' }}
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          git config user.name  "sigma-bot"
          git config user.email "sigma-bot@users.noreply.github.com"
          git add reports/ artifacts/public/ || true
          if ! git diff --cached --quiet; then
            git commit -m "chore(reports): publish Skywire + Sigma outputs for ${DATE}"
            git push
          else
            echo "Nothing new to commit."
          fi
