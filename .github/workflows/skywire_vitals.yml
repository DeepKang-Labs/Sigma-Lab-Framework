name: Skywire/VitalSigns v5.4 (capture → sanitize → integrate)

on:
  workflow_dispatch:
  schedule:
    - cron: "7 0 * * *"   # every day ~00:07 UTC

permissions:
  contents: write
  actions: read

jobs:
  vitals:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      # 1) Full checkout
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Python toolchain
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3) Deps (incl. pandas for official reporter)
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml pandas

      # 4) UTC date
      - name: Date stamp (UTC)
        id: date
        run: echo "date=$(date -u +%Y-%m-%d)" >> "$GITHUB_OUTPUT"

      # 5) Folders
      - name: Prepare folders
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          mkdir -p "data/${DATE}" "reports/${DATE}" reports/latest .tmp
          mkdir -p artifacts/raw artifacts/sanitized artifacts/integration

      # 6) Safe defaults for discovery
      - name: Define endpoints env (auto-discovery safe defaults)
        run: |
          set -euo pipefail
          [ -f .tmp/visors_pks.txt ] || printf "036a...dummyA\n047b...dummyB\n" > .tmp/visors_pks.txt

      # 7) Run VitalSigns (JSON + quick MD)
      - name: Run VitalSigns (produce JSON)
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          OUT_JSON="data/${DATE}/skywire_vitals.json"
          OUT_MD="data/${DATE}/skywire_summary.md"

          if [ -f scripts/skywire_vitals.py ]; then
            python scripts/skywire_vitals.py --out "$OUT_JSON" --summary "$OUT_MD"
          else
            echo "⚠️ Fallback VitalSigns (inline)"
            cat > .tmp/fallback_vitals.py <<'PY'
import os, json, datetime, pathlib
date = os.environ.get("DATE","unknown")
out_json = f"data/{date}/skywire_vitals.json"
out_md   = f"data/{date}/skywire_summary.md"
payload = {
  "date_utc": date,
  "meta": {"source":"fallback","repo":"Sigma-Lab-Framework"},
  "groups": ["explorer","public"],
  "payloads": [{"visor":"demo","ok": True,"latency_ms": 42.0}],
}
pathlib.Path(os.path.dirname(out_json)).mkdir(parents=True, exist_ok=True)
with open(out_json,"w",encoding="utf-8") as f:
    json.dump(payload,f,ensure_ascii=False,indent=2)
with open(out_md,"w",encoding="utf-8") as f:
    f.write(f"# Skywire VitalSigns (fallback) — {date}\n\n")
    f.write(f"- generated: {datetime.datetime.utcnow().isoformat()}Z\n")
    f.write(f"- items: {len(payload.get('payloads',[]))}\n")
PY
            python .tmp/fallback_vitals.py
          fi

          # snapshot for artifacts
          cp "data/${DATE}/skywire_vitals.json" "artifacts/raw/skywire_vitals_${DATE}.json"

      # 8) Upload RAW
      - name: Upload RAW JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_raw_${{ steps.date.outputs.date }}
          path: artifacts/raw/*
          if-no-files-found: error
          retention-days: 7

      # 9) Sanitize + quick report (official if pandas present, else fallback)
      - name: Sanitize JSON (private → public-safe) + generate quick report
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          IN="data/${DATE}/skywire_vitals.json"
          OUT_SAN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT_MD="reports/${DATE}/skywire_vital_report.md"

          if [ -f scripts/skywire_vital_report.py ]; then
            echo "✅ Using official reporter"
            python scripts/skywire_vital_report.py --in "$IN" --out "$OUT_SAN" --md "$OUT_MD"
          else
            echo "⚠️ Fallback sanitize"
            cat > .tmp/fallback_sanitize.py <<'PY'
import os, json, datetime, pathlib
date = os.environ.get("DATE","unknown")
inp = f"data/{date}/skywire_vitals.json"
out_json = f"reports/{date}/skywire_vitals_sanitized.json"
out_md   = f"reports/{date}/skywire_vital_report.md"
pathlib.Path(os.path.dirname(out_json)).mkdir(parents=True, exist_ok=True)
with open(inp,"r",encoding="utf-8") as f:
    data = json.load(f)
if isinstance(data, dict):
    for k in ("ip","debug","public_key"):  # drop potentially sensitive keys
        data.pop(k, None)
with open(out_json,"w",encoding="utf-8") as f:
    json.dump(data,f,ensure_ascii=False,indent=2)
with open(out_md,"w",encoding="utf-8") as f:
    f.write(f"# Skywire Vital Report ({date})\n\n")
    f.write(f"- Generated: {datetime.datetime.utcnow().isoformat()}Z\n")
    f.write(f"- Fields: {len(data)}\n\n")
    f.write("Auto-generated minimal report.")
PY
            python .tmp/fallback_sanitize.py
          fi

          mkdir -p reports/latest
          cp "$OUT_MD"  "reports/latest/skywire_vital_report.md"
          cp "$OUT_SAN" "artifacts/sanitized/skywire_vitals_${DATE}_sanitized.json"

      # 10) Upload SANITIZED + MD
      - name: Upload SANITIZED JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_sanitized_${{ steps.date.outputs.date }}
          path: |
            artifacts/sanitized/*
            reports/${{ steps.date.outputs.date }}/skywire_vital_report.md
          if-no-files-found: error
          retention-days: 7

      # 11) Mini integration (Skywire → Sigma) — démonstration bouclée
      - name: Integration (Skywire → Sigma) + write report
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          IN_SAN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT_JSON="reports/${DATE}/skywire_sigma_analysis_${DATE}.json"
          OUT_MD="reports/${DATE}/skywire_sigma_analysis_${DATE}.md"

          cat > .tmp/integration_sigma.py <<'PY'
import os, json, statistics, datetime, pathlib
date  = os.environ.get("DATE","unknown")
inp   = f"reports/{date}/skywire_vitals_sanitized.json"
outj  = f"reports/{date}/skywire_sigma_analysis_{date}.json"
outmd = f"reports/{date}/skywire_sigma_analysis_{date}.md"

pathlib.Path(os.path.dirname(outj)).mkdir(parents=True, exist_ok=True)
with open(inp,"r",encoding="utf-8") as f:
    payload = json.load(f)

latencies = []
items = 0
if isinstance(payload, dict):
    for p in payload.get("payloads", []):
        if isinstance(p, dict) and "latency_ms" in p:
            try:
                latencies.append(float(p["latency_ms"]))
            except Exception:
                pass
        items += 1

# rudimentary scores
stability = max(0.0, 1.0 - (statistics.pstdev(latencies)/1000.0)) if len(latencies) > 1 else 0.8
availability = 1.0 if items > 0 else 0.0
non_harm = 1.0

result = {
  "date_utc": date,
  "metrics": {
    "items": items,
    "latency_ms_avg": (sum(latencies)/len(latencies)) if latencies else None,
    "latency_ms_std": (statistics.pstdev(latencies) if len(latencies)>1 else None),
  },
  "scores": {
    "stability": round(stability, 3),
    "availability": round(availability, 3),
    "non_harm": non_harm
  },
  "verdict": "OK" if availability > 0.0 else "NO_DATA"
}

with open(outj,"w",encoding="utf-8") as f:
    json.dump(result, f, ensure_ascii=False, indent=2)

with open(outmd,"w",encoding="utf-8") as f:
    f.write(f"# Sigma Integration Report — {date}\n\n")
    f.write(f"- Items: {result['metrics']['items']}\n")
    f.write(f"- Latency avg: {result['metrics']['latency_ms_avg']}\n")
    f.write(f"- Stability score: {result['scores']['stability']}\n")
    f.write(f"- Availability score: {result['scores']['availability']}\n")
    f.write(f"- Verdict: **{result['verdict']}**\n")
PY
          python .tmp/integration_sigma.py

          # expose in artifacts + latest
          cp "reports/${DATE}/skywire_sigma_analysis_${DATE}.json" "artifacts/integration/"
          cp "reports/${DATE}/skywire_sigma_analysis_${DATE}.md"   "reports/latest/skywire_sigma_analysis.md"

      # 12) Upload integration artifacts
      - name: Upload Integration Reports (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: sigma_integration_${{ steps.date.outputs.date }}
          path: |
            artifacts/integration/*
            reports/${{ steps.date.outputs.date }}/skywire_sigma_analysis_${{ steps.date.outputs.date }}.md
          if-no-files-found: error
          retention-days: 7

      # 13) Commit latest pointers (optional)
      - name: Commit & push reports
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          git config user.name  "SigmaLab Bot"
          git config user.email "bot@sigmalab.local"
          git add reports/latest || true
          git commit -m "chore(reports): update latest pointers for ${DATE}" || echo "no changes"
          git push || echo "noop"
