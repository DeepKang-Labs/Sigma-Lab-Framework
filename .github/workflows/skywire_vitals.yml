name: Skywire / VitalSigns + Sigma Integration

on:
  workflow_dispatch: {}
  schedule:
    - cron: "17 0 * * *"   # tous les jours ~00:17 UTC (évite l'embouteillage Actions)

permissions:
  contents: write   # pour committer les rapports
  actions: read

jobs:
  vitals:
    runs-on: ubuntu-latest

    steps:
      # --------------------------------------------------
      # 0) Checkout
      # --------------------------------------------------
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --------------------------------------------------
      # 1) Python + deps
      # --------------------------------------------------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      # --------------------------------------------------
      # 2) Date stamp (UTC) → steps.date.outputs.date
      # --------------------------------------------------
      - name: Date stamp (UTC)
        id: date
        run: echo "date=$(date -u +%Y-%m-%d)" >> "$GITHUB_OUTPUT"

      # --------------------------------------------------
      # 3) Préparer dossiers
      # --------------------------------------------------
      - name: Prepare folders
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          mkdir -p "data/${DATE}"
          mkdir -p "reports/${DATE}"
          mkdir -p "reports/latest"
          mkdir -p artifacts/raw
          mkdir -p artifacts/sanitized

      # --------------------------------------------------
      # 4) (Optionnel) auto-discovery endpoints
      #    Écrit .tmp/visors_pks.txt si absent
      # --------------------------------------------------
      - name: Define endpoints env (auto-discovery safe defaults)
        run: |
          set -euo pipefail
          mkdir -p .tmp
          if [ ! -f .tmp/visors_pks.txt ]; then
            printf "036a...dummykeyA\n047b...dummykeyB\n" > .tmp/visors_pks.txt
          fi

      # --------------------------------------------------
      # 5) Run VitalSigns (produit JSON + mini résumé MD)
      #    Utilise scripts/skywire_vitals.py si présent.
      #    Sinon fallback inline (heredoc correctement quoté).
      # --------------------------------------------------
      - name: Run VitalSigns (produce JSON)
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          OUT_JSON="data/${DATE}/skywire_vitals.json"
          OUT_MD="data/${DATE}/skywire_summary.md"

          if [ -f scripts/skywire_vitals.py ]; then
            python scripts/skywire_vitals.py --out "$OUT_JSON" --summary "$OUT_MD"
          else
            python - <<'PY'
import os, json, datetime
date = os.environ.get("DATE","unknown")
out_json = f"data/{date}/skywire_vitals.json"
out_md   = f"data/{date}/skywire_summary.md"
payload = {
  "date_utc": date,
  "meta": {"source": "fallback", "repo": "Sigma-Lab-Framework"},
  "groups": ["explorer", "public"],
  "payloads": [{"visor":"demo","ok": True, "latency_ms": 42.0}]
}
os.makedirs(os.path.dirname(out_json), exist_ok=True)
with open(out_json,"w",encoding="utf-8") as f:
  json.dump(payload,f,ensure_ascii=False,indent=2)
with open(out_md,"w",encoding="utf-8") as f:
  f.write(f"# Skywire VitalSigns (fallback) — {date}\n\n- generated: {datetime.datetime.utcnow().isoformat()}Z\n- items: {len(payload.get('payloads',[]))}\n")
PY
          fi

          # snapshot brut → artefacts/raw
          cp "data/${DATE}/skywire_vitals.json" "artifacts/raw/skywire_vitals_${DATE}.json"

      - name: Upload RAW JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_raw_${{ steps.date.outputs.date }}
          path: artifacts/raw/*
          if-no-files-found: error
          retention-days: 7

      # --------------------------------------------------
      # 6) Sanitize + quick report (CORRIGÉ : heredoc <<'PY')
      # --------------------------------------------------
      - name: Sanitize JSON (private → public-safe) + generate quick report
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          IN="data/${DATE}/skywire_vitals.json"
          OUT_SAN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT_MD="reports/${DATE}/skywire_vital_report.md"

          if [ -f scripts/skywire_vital_report.py ]; then
            # Preferred reporter si disponible
            python scripts/skywire_vital_report.py --in "$IN" --out "$OUT_SAN" --md "$OUT_MD"
          else
            # Fallback robuste via script temporaire (YAML-safe)
            cat > .tmp/fallback_sanitize.py <<'PY'
import os, json, datetime, pathlib
date = os.environ.get('DATE', 'unknown')
inp = f"data/{date}/skywire_vitals.json"
out_json = f"reports/{date}/skywire_vitals_sanitized.json"
out_md = f"reports/{date}/skywire_vital_report.md"

pathlib.Path(os.path.dirname(out_json)).mkdir(parents=True, exist_ok=True)

with open(inp, "r", encoding="utf-8") as f:
    data = json.load(f)

# Light sanitize: remove potentially sensitive top-level keys if any
if isinstance(data, dict):
    for k in ("ip", "public_key", "debug"):
        data.pop(k, None)

with open(out_json, "w", encoding="utf-8") as f:
    json.dump(data, f, ensure_ascii=False, indent=2)

md = [
  f"# Skywire Vital Report ({date})",
  "",
  f"- Generated: {datetime.datetime.utcnow().isoformat()}Z",
  f"- Fields: {len(data) if hasattr(data, '__len__') else 'n/a'}",
  "",
  "This is an auto-generated minimal report."
]
with open(out_md, "w", encoding="utf-8") as f:
    f.write("\n".join(md))
PY
            python .tmp/fallback_sanitize.py
          fi

          # copies utiles
          cp "$OUT_SAN" "artifacts/sanitized/skywire_vitals_${DATE}_sanitized.json"
          cp "$OUT_MD"  "reports/latest/skywire_vital_report.md"
          cp "$OUT_SAN" "reports/latest/skywire_vitals_sanitized.json"

      - name: Upload SANITIZED JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_sanitized_${{ steps.date.outputs.date }}
          path: |
            artifacts/sanitized/*
            reports/${{ steps.date.outputs.date }}/skywire_vital_report.md
          if-no-files-found: error
          retention-days: 7

      # --------------------------------------------------
      # 7) Rendre le moteur importable (PYTHONPATH)
      # --------------------------------------------------
      - name: Make engine importable (package + PYTHONPATH)
        run: |
          echo "PYTHONPATH=$PWD" >> "$GITHUB_ENV"

      # --------------------------------------------------
      # 8) Intégration Skywire → Sigma (avec fallback)
      #    1) Tente engine.SigmaAnalyzer sur le JSON sanitisé
      #    2) Sinon calcule des scores simples et écrit un verdict
      # --------------------------------------------------
      - name: Run Integration (Skywire → Sigma) + reports
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          IN_SAN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT_ANALYSIS="reports/${DATE}/skywire_sigma_analysis.json"
          OUT_SUMMARY="reports/${DATE}/skywire_sigma_summary.md"

          python - <<'PY'
import os, json, importlib, statistics, datetime, pathlib, sys
date = os.environ.get("DATE","unknown")
in_san  = f"reports/{date}/skywire_vitals_sanitized.json"
out_js  = f"reports/{date}/skywire_sigma_analysis.json"
out_md  = f"reports/{date}/skywire_sigma_summary.md"
pathlib.Path(os.path.dirname(out_js)).mkdir(parents=True, exist_ok=True)

with open(in_san, "r", encoding="utf-8") as f:
    data = json.load(f)

def write_outputs(analysis, notes):
    with open(out_js, "w", encoding="utf-8") as f:
        json.dump(analysis, f, ensure_ascii=False, indent=2)
    md = [
      f"# Sigma Integration Summary ({date})",
      "",
      f"- Generated: {datetime.datetime.utcnow().isoformat()}Z",
      "",
      "## Scores",
      *(f"- **{k}**: {v}" for k,v in analysis.get("scores",{}).items()),
      "",
      f"**Verdict:** {analysis.get('verdict','n/a')}",
      "",
      "## Notes",
      notes or "n/a"
    ]
    with open(out_md, "w", encoding="utf-8") as f:
        f.write("\n".join(md))

# tentative d'import du moteur officiel
try:
    mod = importlib.import_module("engine.sigma_analyzer")
    SigmaAnalyzer = getattr(mod, "SigmaAnalyzer")
    analyzer = SigmaAnalyzer()
    result = analyzer.analyze(data)
    # on impose un schéma standard minimal
    analysis = {
      "date": date,
      "scores": result.get("scores", {}),
      "verdict": result.get("verdict","undetermined"),
      "engine": "official"
    }
    write_outputs(analysis, "Analysis produced by official SigmaAnalyzer.")
except Exception as e:
    # fallback: calculs simples & verdict basique
    latencies = []
    try:
        if isinstance(data, dict):
            payloads = data.get("payloads", [])
            for p in payloads:
                v = p.get("latency_ms")
                if isinstance(v, (int,float)):
                    latencies.append(float(v))
    except Exception:
        pass

    avg = statistics.fmean(latencies) if latencies else None
    score_stability = 100.0 if (avg is not None and avg < 100) else 60.0 if (avg is not None and avg < 200) else 30.0
    analysis = {
      "date": date,
      "scores": {
        "non_harm": 100.0,
        "stability": score_stability,
        "resilience": 70.0,
        "equity": 80.0
      },
      "verdict": "healthy" if score_stability >= 60.0 else "degraded",
      "engine": "fallback"
    }
    write_outputs(analysis, f"Official engine unavailable ({e}). Fallback scoring applied.")
PY

          # Publier les outputs “latest” aussi
          cp "reports/${DATE}/skywire_sigma_analysis.json" "reports/latest/skywire_sigma_analysis.json"
          cp "reports/${DATE}/skywire_sigma_summary.md"   "reports/latest/skywire_sigma_summary.md"

      # --------------------------------------------------
      # 9) Artefacts d’intégration
      # --------------------------------------------------
      - name: Upload Integration Reports (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_sigma_integration_${{ steps.date.outputs.date }}
          path: |
            reports/${{ steps.date.outputs.date }}/*
            reports/latest/*
          if-no-files-found: error
          retention-days: 7

      # --------------------------------------------------
      # 10) Commit & push des rapports
      # --------------------------------------------------
      - name: Commit & push reports
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "reports/${DATE}" "reports/latest" || true
          if ! git diff --cached --quiet; then
            git commit -m "chore(reports): Skywire + Sigma for ${DATE}"
            git push
          else
            echo "No report changes to commit."
          fi
