name: skywire-vitals

on:
  workflow_dispatch:
  schedule:
    - cron: "14 3 * * *"  # exécution quotidienne à 03:14 UTC

permissions:
  contents: write

concurrency:
  group: skywire-vitals
  cancel-in-progress: false

env:
  # --------- Défauts sûrs (remplaçables via SECRETS) ----------
  PYTHONUNBUFFERED: "1"
  UT_MAX_VISORS: "100"
  UT_SAMPLE_MODE: "random"
  VISORS_PKS_AUTO: "false"
  VISORS_PKS: ""

  # Endpoints publics par défaut
  SKYWIRE_ENDPOINTS: "https://explorer.skycoin.com/api/blockchain/metadata,https://explorer.skycoin.com/api/coinSupply"
  SKYWIRE_PUBLIC_ENDPOINTS: >-
    https://sd.skycoin.com/api/services?type=proxy,
    https://sd.skycoin.com/api/services?type=vpn,
    https://tpd.skywire.skycoin.com/all-transports,
    https://dmsgd.skywire.skycoin.com/dmsg-discovery/entries,
    https://rf.skywire.skycoin.com/
  SKYWIRE_NODE_ENDPOINTS: ""   # ex: https://<node-1>/api/health,https://<node-2>/api/metrics
  FIBER_ENDPOINTS: "https://fiber.skywire.dev/api/status,https://fiber.skywire.dev/api/metrics"

jobs:
  vitals:
    name: vitals
    runs-on: ubuntu-latest
    steps:
      # --- Date (pour chemins de sortie) ---
      - id: date
        name: Compute date (UTC)
        run: echo "today=$(date -u +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"

      # --- Checkout complet (avec token pour push) ---
      - name: Checkout (full history, with token)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # --- Python ---
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -e
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install requests pyyaml rich
          fi

      # --- Fusion des secrets -> env (écrasent les défauts si présents) ---
      - name: Normalize env (compact comma lists from secrets)
        run: |
          set -e
          set_kv () { key="$1"; val="$2"; [ -n "$val" ] && echo "$key=$val" >> "$GITHUB_ENV"; }
          set_kv SKYWIRE_ENDPOINTS            "${{ secrets.SKYWIRE_ENDPOINTS }}"
          set_kv SKYWIRE_PUBLIC_ENDPOINTS     "${{ secrets.SKYWIRE_PUBLIC_ENDPOINTS }}"
          set_kv SKYWIRE_NODE_ENDPOINTS       "${{ secrets.SKYWIRE_NODE_ENDPOINTS }}"
          set_kv FIBER_ENDPOINTS              "${{ secrets.FIBER_ENDPOINTS }}"
          set_kv VISORS_PKS                   "${{ secrets.VISORS_PKS }}"
          set_kv VISORS_PKS_AUTO              "${{ secrets.VISORS_PKS_AUTO }}"
          set_kv UT_MAX_VISORS                "${{ secrets.UT_MAX_VISORS }}"
          set_kv UT_SAMPLE_MODE               "${{ secrets.UT_SAMPLE_MODE }}"

      - name: Debug env
        run: |
          echo "TODAY=${{ steps.date.outputs.today }}"
          echo "SKYWIRE_ENDPOINTS=$SKYWIRE_ENDPOINTS"
          echo "SKYWIRE_PUBLIC_ENDPOINTS=$SKYWIRE_PUBLIC_ENDPOINTS"
          echo "SKYWIRE_NODE_ENDPOINTS=$SKYWIRE_NODE_ENDPOINTS"
          echo "FIBER_ENDPOINTS=$FIBER_ENDPOINTS"
          echo "VISORS_PKS_AUTO=$VISORS_PKS_AUTO"
          echo "UT_MAX_VISORS=$UT_MAX_VISORS"
          echo "UT_SAMPLE_MODE=$UT_SAMPLE_MODE"

      # --- Génération des sorties (JSON brut + Markdown) ---
      - name: Run VitalSigns (produit JSON brut + Markdown)
        env:
          TODAY: ${{ steps.date.outputs.today }}
        run: |
          set -euo pipefail
          mkdir -p "data/$TODAY"
          # Le script produit:
          #   data/$TODAY/skywire_vitals.json   (brut, non commité)
          #   data/$TODAY/skywire_summary.md    (rapport MD, commité)
          python scripts/skywire_vitals.py || true
          echo "Wrote: data/$TODAY/skywire_vitals.json & data/$TODAY/skywire_summary.md"

      # --- Artefact privé (JSON brut) ---
      - name: Upload RAW JSON (private artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: skywire_vitals_raw_${{ steps.date.outputs.today }}
          path: data/${{ steps.date.outputs.today }}/skywire_vitals.json
          if-no-files-found: warn
          retention-days: 14

      # --- Sanitize JSON (épuré) ---
      - name: Produce sanitized JSON
        env:
          TODAY: ${{ steps.date.outputs.today }}
        run: |
          set -e
          IN="data/$TODAY/skywire_vitals.json"
          OUT="data/$TODAY/skywire_vitals_sanitized.json"
          python - << 'PY'
import json, os, sys
tod = os.environ["TODAY"]
p = f"data/{tod}/skywire_vitals.json"
q = f"data/{tod}/skywire_vitals_sanitized.json"
try:
    with open(p, "r") as f:
        doc = json.load(f)
except FileNotFoundError:
    print("No raw JSON found; skipping sanitize.")
    sys.exit(0)

for g in doc.get("groups", []):
    # Public: résumer les 'samples' en nombres pour la publication
    if g.get("name") == "public":
        summ = g.get("summary", {})
        samp = summ.get("samples", {})
        if isinstance(samp, dict):
            for k, v in list(samp.items()):
                if isinstance(v, list):
                    samp[k] = len(v)
        # réduire payloads à status uniquement
        payloads = g.get("payloads", [])
        for it in payloads:
            for k in list(it.keys()):
                if k not in ("__url__", "__ok__", "__status__"):
                    del it[k]
    # Nodes: ne jamais publier la liste des PK
    if g.get("name") == "nodes":
        g["visors_pks"] = []
        s = g.get("summary", {})
        if "ut_note" in s:
            s["ut_note"] = "(redacted)"

with open(q, "w") as f:
    json.dump(doc, f, indent=2, ensure_ascii=False)
print("Sanitized written:", q)
PY

      # --- Artefact privé (sanitizé, pour vérif hors repo) ---
      - name: Upload SANITIZED JSON (private artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: skywire_vitals_sanitized_${{ steps.date.outputs.today }}
          path: data/${{ steps.date.outputs.today }}/skywire_vitals_sanitized.json
          if-no-files-found: warn
          retention-days: 14

      # --- Commit/Pull/Push rebase-safe du Markdown public ---
      - name: Commit & push summary (rebase-safe)
        env:
          TODAY: ${{ steps.date.outputs.today }}
        run: |
          set -e
          git config user.name  "sigma-bot"
          git config user.email "actions@github.com"
          git add "data/$TODAY/skywire_summary.md"
          git commit -m "chore(data): Skywire VitalSigns daily snapshot" || echo "No changes to commit"
          # rebase-safe
          git pull --rebase origin "${GITHUB_REF_NAME:-${GITHUB_HEAD_REF:-main}}" || true
          git push origin HEAD:"${GITHUB_REF_NAME:-${GITHUB_HEAD_REF:-main}}" || true

      # --- Nettoyage des JSON dans le workspace du runner (sécurité) ---
      - name: Clean workspace JSON (safety)
        if: always()
        env:
          TODAY: ${{ steps.date.outputs.today }}
        run: |
          rm -f "data/$TODAY/skywire_vitals.json" || true
          rm -f "data/$TODAY/skywire_vitals_sanitized.json" || true

      - name: Done
        run: echo "Skywire VitalSigns workflow finished."
