name: Skywire/VitalSigns v5.3 (capture ‚Üí sanitize ‚Üí integrate)

on:
  workflow_dispatch:
  schedule:
    - cron: "7 0 * * *"   # chaque jour vers 00:07 UTC

permissions:
  contents: write
  actions: read

jobs:
  vitals:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      # 1) Checkout complet
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3) Install minimal deps
      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      # 4) Horodatage UTC
      - name: Date stamp (UTC)
        id: date
        run: echo "date=$(date -u +%Y-%m-%d)" >> "$GITHUB_OUTPUT"

      # 5) Pr√©paration des dossiers
      - name: Prepare folders
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          mkdir -p "data/${DATE}" "reports/${DATE}" reports/latest .tmp
          mkdir -p artifacts/raw artifacts/sanitized

      # 6) Endpoints par d√©faut
      - name: Define endpoints env (auto-discovery safe defaults)
        run: |
          set -euo pipefail
          [ -f .tmp/visors_pks.txt ] || printf "036a...dummyA\n047b...dummyB\n" > .tmp/visors_pks.txt

      # 7) Run VitalSigns (JSON + mini r√©sum√©)
      - name: Run VitalSigns (produce JSON)
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          OUT_JSON="data/${DATE}/skywire_vitals.json"
          OUT_MD="data/${DATE}/skywire_summary.md"

          if [ -f scripts/skywire_vitals.py ]; then
            python scripts/skywire_vitals.py --out "$OUT_JSON" --summary "$OUT_MD"
          else
            echo "‚ö†Ô∏è Fallback inline activ√©"
            python - <<'PY'
import os, json, datetime, pathlib
date = os.environ.get("DATE","unknown")
out_json = f"data/{date}/skywire_vitals.json"
out_md   = f"data/{date}/skywire_summary.md"
payload = {
  "date_utc": date,
  "meta": {"source":"fallback","repo":"Sigma-Lab-Framework"},
  "groups": ["explorer","public"],
  "payloads": [{"visor":"demo","ok": True,"latency_ms": 42.0}],
}
pathlib.Path(os.path.dirname(out_json)).mkdir(parents=True, exist_ok=True)
with open(out_json,"w",encoding="utf-8") as f:
    json.dump(payload,f,ensure_ascii=False,indent=2)
with open(out_md,"w",encoding="utf-8") as f:
    f.write(f"# Skywire VitalSigns (fallback) ‚Äî {date}\n\n")
    f.write(f"- generated: {datetime.datetime.utcnow().isoformat()}Z\n")
    f.write(f"- items: {len(payload.get('payloads',[]))}\n")
PY
          fi

          cp "data/${DATE}/skywire_vitals.json" "artifacts/raw/skywire_vitals_${DATE}.json"

      # 8) Upload RAW
      - name: Upload RAW JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_raw_${{ steps.date.outputs.date }}
          path: artifacts/raw/*
          if-no-files-found: error
          retention-days: 7

      # 9) Sanitize + quick report (l√©ger, fallback si pas de pandas)
      - name: Sanitize JSON (private ‚Üí public-safe) + generate quick report
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          IN="data/${DATE}/skywire_vitals.json"
          OUT_SAN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT_MD="reports/${DATE}/skywire_vital_report.md"

          echo "üîç V√©rification de pandas..."
          if python -c "import importlib.util; exit(0 if importlib.util.find_spec('pandas') else 1)"; then
            echo "‚úÖ pandas d√©tect√©, utilisation du reporter officiel"
            python scripts/skywire_vital_report.py --in "$IN" --out "$OUT_SAN" --md "$OUT_MD"
          else
            echo "‚ö†Ô∏è pandas absent, fallback utilis√©"
            python - <<'PY'
import os, json, datetime, pathlib
date = os.environ.get("DATE","unknown")
inp = f"data/{date}/skywire_vitals.json"
out_json = f"reports/{date}/skywire_vitals_sanitized.json"
out_md   = f"reports/{date}/skywire_vital_report.md"
pathlib.Path(os.path.dirname(out_json)).mkdir(parents=True, exist_ok=True)
try:
    with open(inp,"r",encoding="utf-8") as f:
        data = json.load(f)
    if isinstance(data, dict):
        for k in ("ip","debug","public_key"):
            data.pop(k,None)
    with open(out_json,"w",encoding="utf-8") as f:
        json.dump(data,f,ensure_ascii=False,indent=2)
    with open(out_md,"w",encoding="utf-8") as f:
        f.write(f"# Skywire Vital Report ({date})\n\n")
        f.write(f"- Generated: {datetime.datetime.utcnow().isoformat()}Z\n")
        f.write(f"- Fields: {len(data)}\n\n")
        f.write("Auto-generated minimal report.")
except Exception as e:
    with open(out_md,"w") as f: f.write(f"Error: {e}")
PY
          fi

          mkdir -p reports/latest
          cp "$OUT_SAN" "artifacts/sanitized/skywire_vitals_${DATE}_sanitized.json"
          cp "$OUT_MD"  "reports/latest/skywire_vital_report.md"

      # 10) Upload SANITIZED JSON
      - name: Upload SANITIZED JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_sanitized_${{ steps.date.outputs.date }}
          path: |
            artifacts/sanitized/*
            reports/${{ steps.date.outputs.date }}/skywire_vital_report.md
          if-no-files-found: error
          retention-days: 7
