name: Skywire/VitalSigns

on:
  workflow_dispatch: {}
  schedule:
    - cron: "07 00 * * *"
  push:
    paths:
      - "scripts/**"
      - ".github/workflows/skywire_vitals.yml"

permissions:
  contents: write

jobs:
  vitals:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python (minimal)
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install tools (jq, curl) + light deps
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq curl
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: Date stamp (UTC)
        id: date
        run: echo "date=$(date -u +%Y-%m-%d)" >> "$GITHUB_OUTPUT"

      - name: Prepare folders
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          mkdir -p "data/${DATE}" "reports/${DATE}" "reports/latest" "artifacts/raw" "artifacts/sanitized" ".tmp"

      - name: Safe defaults for discovery
        run: |
          set -euo pipefail
          [ -f .tmp/visors_pks.txt ] || printf "036a...dummyA\n047b...dummyB\n" > .tmp/visors_pks.txt

      # --------- VITALS CAPTURE (with safe fallback) ----------
      - name: Run VitalSigns (produce JSON)
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          OUT_JSON="data/${DATE}/skywire_vitals.json"
          OUT_MD="data/${DATE}/skywire_summary.md"

          if [ -f scripts/skywire_vitals.py ]; then
            python scripts/skywire_vitals.py --out "$OUT_JSON" --summary "$OUT_MD"
          else
            echo "⚠️ Fallback VitalSigns: generating minimal payload"
            printf '%s\n' \
              '{' \
              "  \"date_utc\": \"${DATE}\"," \
              '  "meta": {"source":"fallback","repo":"Sigma-Lab-Framework"},' \
              '  "groups": ["explorer","public"],' \
              '  "payloads": [{' \
              '    "visor": "demo",' \
              '    "ok": true,' \
              '    "latency_ms": 42.0' \
              '  }]' \
              '}' > "$OUT_JSON"

            printf '# Skywire VitalSigns (fallback) — %s\n\n- generated: %sZ\n- items: 1\n' \
              "${DATE}" "$(date -u +%FT%T)" > "$OUT_MD"
          fi

          # snapshot for artefacts
          cp "$OUT_JSON" "artifacts/raw/skywire_vitals_${DATE}.json"

      - name: Upload RAW JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_raw_${{ steps.date.outputs.date }}
          path: artifacts/raw/*
          if-no-files-found: error
          retention-days: 7

      # --------- SANITIZE + QUICK REPORT (jq-based) ----------
      - name: Sanitize JSON (private → public-safe) + quick report
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          IN="data/${DATE}/skywire_vitals.json"
          OUT_SAN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT_MD="reports/${DATE}/skywire_vital_report.md"

          # sanitize (drop potentially sensitive top-level keys if present)
          jq 'del(.ip, .public_key, .debug)' "$IN" > "$OUT_SAN"

          ITEMS=$(jq '.payloads | length' "$OUT_SAN" 2>/dev/null || echo 0)
          printf '# Skywire Vital Report (%s)\n\n- Generated: %sZ\n- Items: %s\n' \
            "${DATE}" "$(date -u +%FT%T)" "${ITEMS}" > "$OUT_MD"

          # latest pointers
          cp "$OUT_SAN" "reports/latest/skywire_vitals_sanitized.json"
          cp "$OUT_MD"  "reports/latest/skywire_vital_report.md"

      - name: Upload SANITIZED JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_sanitized_${{ steps.date.outputs.date }}
          path: |
            reports/${{ steps.date.outputs.date }}/skywire_vitals_sanitized.json
            reports/${{ steps.date.outputs.date }}/skywire_vital_report.md
          if-no-files-found: error
          retention-days: 7

      # --------- INTEGRATION Skywire → Sigma (bash + jq) ----------
      - name: Run Integration (Skywire → Sigma) + reports
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          IN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT_JSON="reports/${DATE}/skywire_sigma_analysis_${DATE}.json"
          OUT_MD="reports/${DATE}/integration_summary_${DATE}.md"

          # extract latencies
          jq -r '.payloads[]? | .latency_ms // empty' "$IN" | awk '
            { a[NR]=$1; sum+=$1 }
            END{
              n=NR
              if(n==0){ print "N=0"; exit 0 }
              # copy & sort for percentile
              for(i=1;i<=n;i++) b[i]=a[i]
              # simple bubble sort (n small in CI) to avoid external deps
              for(i=1;i<=n;i++) for(j=i+1;j<=n;j++) if(b[i]>b[j]){ t=b[i]; b[i]=b[j]; b[j]=t }
              # mean
              mean=sum/n
              # p95 index (ceil)
              idx=int(0.95*n); if(idx<1) idx=1; if(idx>n) idx=n
              p95=b[idx]
              printf "N=%d MEAN=%.6f P95=%.6f\n", n, mean, p95
            }
          ' > .tmp/lat_stats.txt || true

          if grep -q '^N=0' .tmp/lat_stats.txt; then
            N=0; MEAN=0; P95=0
          else
            eval "$(cat .tmp/lat_stats.txt)"   # sets N, MEAN, P95
          fi

          # simple scoring in [0,1]
          non_harm=1.0
          # stability: the lower the mean latency, the higher the score
          stability=$(awk -v m="$MEAN" 'BEGIN{ s=1.0-(m/1000.0); if(s<0) s=0; if(s>1) s=1; print s }')
          # resilience: based on p95
          resilience=$(awk -v p="$P95" 'BEGIN{ s=1.0-(p/1500.0); if(s<0) s=0; if(s>1) s=1; print s }')
          # equity: crude diversity proxy = unique visors count
          U=$(jq -r '[.payloads[]? | .visor] | unique | length' "$IN" 2>/dev/null || echo 0)
          equity=$(awk -v u="$U" 'BEGIN{ s=0.5+0.1*u; if(s<0) s=0; if(s>1) s=1; print s }')

          verdict="OBSERVE"
          awk -v st="$stability" -v re="$resilience" 'BEGIN{ if(st>=0.5 && re>=0.5) exit 0; else exit 1 }'
          if [ $? -eq 0 ]; then verdict="OK"; fi

          # write JSON
          jq -n \
            --arg date "$DATE" \
            --argjson scores "{\"non_harm\":$non_harm,\"stability\":$stability,\"resilience\":$resilience,\"equity\":$equity}" \
            --arg verdict "$verdict" \
            '{date:$date, scores:($scores), verdict:$verdict}' \
            > "$OUT_JSON"

          # write MD
          {
            echo "# Integration Test — Skywire → Sigma"
            echo
            echo "**Date:** $DATE"
            echo
            echo "## Output"
            echo
            echo "- Verdict: **$verdict**"
            echo "- Scores: \`$(cat "$OUT_JSON" | jq -c .scores)\`"
            echo "- Latency stats: N=$N, mean=${MEAN}ms, p95=${P95}ms"
            echo "- Generated: $(date -u +%FT%TZ)"
          } > "$OUT_MD"

          cp "$OUT_MD" "reports/latest/integration_summary.md"

      - name: Upload Integration Reports (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_integration_${{ steps.date.outputs.date }}
          path: |
            reports/${{ steps.date.outputs.date }}/integration_summary_${{ steps.date.outputs.date }}.md
            reports/${{ steps.date.outputs.date }}/skywire_sigma_analysis_${{ steps.date.outputs.date }}.json
          if-no-files-found: error
          retention-days: 7

      - name: Commit & push reports
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add reports/
          git commit -m "report(skywire): vitals + integration — ${DATE}" || echo "No changes to commit"
          git push
