name: Skywire/VitalSigns

on:
  workflow_dispatch: {}
  schedule:
    - cron: "07 00 * * *"   # tous les jours 00:07 UTC
  push:
    paths:
      - "scripts/**"
      - ".github/workflows/skywire_vitals.yml"

permissions:
  contents: write

jobs:
  vitals:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      # 1) Checkout (full history utile pour commit des rapports)
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      # 3) Deps minimales (pas de pandas requis)
      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      # 4) Date (UTC) utilisable via steps.date.outputs.date
      - name: Date stamp (UTC)
        id: date
        run: echo "date=$(date -u +%Y-%m-%d)" >> "$GITHUB_OUTPUT"

      # 5) Prépare les dossiers
      - name: Prepare folders
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          mkdir -p "data/${DATE}" "reports/${DATE}" "reports/latest" ".tmp"
          mkdir -p artifacts/raw artifacts/sanitized

      # 6) Valeurs sûres (auto-discovery placeholder)
      - name: Safe defaults for discovery
        run: |
          set -euo pipefail
          [ -f .tmp/visors_pks.txt ] || printf "036a...dummyA\n047b...dummyB\n" > .tmp/visors_pks.txt

      # 7) Run VitalSigns (JSON + quick MD) avec fallback inline YAML-safe
      - name: Run VitalSigns (produce JSON)
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          OUT_JSON="data/${DATE}/skywire_vitals.json"
          OUT_MD="data/${DATE}/skywire_summary.md"

          if [ -f scripts/skywire_vitals.py ]; then
            python scripts/skywire_vitals.py --out "$OUT_JSON" --summary "$OUT_MD"
          else
            echo "⚠️ Fallback VitalSigns (inline mode active)"
            mkdir -p .tmp
            cat > .tmp/fallback_vitals.py <<'PY'
import os, json, datetime, pathlib

date = os.environ.get("DATE","unknown")
out_json = f"data/{date}/skywire_vitals.json"
out_md   = f"data/{date}/skywire_summary.md"

payload = {
    "date_utc": date,
    "meta": {"source":"fallback","repo":"Sigma-Lab-Framework"},
    "groups": ["explorer","public"],
    "payloads": [{"visor":"demo","ok": True,"latency_ms": 42.0}]
}

pathlib.Path(os.path.dirname(out_json)).mkdir(parents=True, exist_ok=True)

with open(out_json,"w",encoding="utf-8") as f:
    json.dump(payload,f,ensure_ascii=False,indent=2)

with open(out_md,"w",encoding="utf-8") as f:
    f.write(f"# Skywire VitalSigns (fallback) — {date}\n\n")
    f.write(f"- generated: {datetime.datetime.utcnow().isoformat()}Z\n")
    f.write(f"- items: {len(payload.get('payloads',[]))}\n")
PY
            python .tmp/fallback_vitals.py
          fi

          # Snapshot pour artefacts
          cp "data/${DATE}/skywire_vitals.json" "artifacts/raw/skywire_vitals_${DATE}.json"

      # 8) Upload RAW artefact
      - name: Upload RAW JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_raw_${{ steps.date.outputs.date }}
          path: artifacts/raw/*
          if-no-files-found: error
          retention-days: 7

      # 9) Sanitize + quick report (détection pandas → officiel sinon fallback)
      - name: Sanitize JSON (private → public-safe) + generate quick report
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          IN="data/${DATE}/skywire_vitals.json"
          OUT_SAN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT_MD="reports/${DATE}/skywire_vital_report.md"

          if [ -f scripts/skywire_vital_report.py ] && python - <<'PY' >/dev/null 2>&1
import importlib.util; import sys
sys.exit(0 if importlib.util.find_spec('pandas') else 1)
PY
          then
            echo "✅ pandas détecté — utilisation du reporter officiel"
            python scripts/skywire_vital_report.py --in "$IN" --out "$OUT_SAN" --md "$OUT_MD"
          else
            echo "🪶 pandas absent — fallback léger"
            python - <<'PY'
import os, json, datetime, pathlib
date = os.environ.get("DATE","unknown")
inp = f"data/{date}/skywire_vitals.json"
out_json = f"reports/{date}/skywire_vitals_sanitized.json"
out_md = f"reports/{date}/skywire_vital_report.md"

with open(inp,"r",encoding="utf-8") as f:
    data = json.load(f)

# Sanitize léger (retire des clés potentiellement sensibles si présentes au top-level)
for k in ("ip","public_key","debug"):
    if isinstance(data, dict) and k in data:
        data.pop(k, None)

pathlib.Path(os.path.dirname(out_json)).mkdir(parents=True, exist_ok=True)
with open(out_json,"w",encoding="utf-8") as f:
    json.dump(data,f,ensure_ascii=False,indent=2)

md = [
  f"# Skywire Vital Report ({date})",
  "",
  f"- Generated: {datetime.datetime.utcnow().isoformat()}Z",
  f"- Fields: {len(data) if hasattr(data,'__len__') else 'n/a'}",
  "",
  "This is an auto-generated minimal report."
]
with open(out_md,"w",encoding="utf-8") as f:
    f.write("\n".join(md))
PY
          fi

          # Pointeur latest
          cp "reports/${DATE}/skywire_vitals_sanitized.json" "reports/latest/skywire_vitals_sanitized.json"
          cp "reports/${DATE}/skywire_vital_report.md" "reports/latest/skywire_vital_report.md"

      # 10) Upload SANITIZED artefact
      - name: Upload SANITIZED JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_sanitized_${{ steps.date.outputs.date }}
          path: |
            reports/${{ steps.date.outputs.date }}/skywire_vitals_sanitized.json
            reports/${{ steps.date.outputs.date }}/skywire_vital_report.md
          if-no-files-found: error
          retention-days: 7

      # 11) Intégration Skywire → Sigma (inline, pas de dépendance externe)
      - name: Run Integration (Skywire → Sigma) + reports
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          IN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT_JSON="reports/${DATE}/skywire_sigma_analysis_${DATE}.json"
          OUT_MD="reports/${DATE}/integration_summary_${DATE}.md"

          python - <<'PY'
import os, json, statistics, datetime, pathlib

date = os.environ.get("DATE","unknown")
inp = f"reports/{date}/skywire_vitals_sanitized.json"
out_json = f"reports/{date}/skywire_sigma_analysis_{date}.json"
out_md = f"reports/{date}/integration_summary_{date}.md"

with open(inp,"r",encoding="utf-8") as f:
    data = json.load(f)

payloads = data.get("payloads", [])
latencies = [p.get("latency_ms") for p in payloads if isinstance(p, dict) and isinstance(p.get("latency_ms"), (int,float))]

non_harm = 1.0
stability = 0.5
resilience = 0.5
equity = 0.5

if latencies:
    p50 = statistics.median(latencies)
    p95 = statistics.quantiles(latencies, n=20)[18] if len(latencies) >= 20 else max(latencies)
    stability = max(0.0, min(1.0, 1.0 - (p50/1000.0)))
    resilience = max(0.0, min(1.0, 1.0 - (p95/1500.0)))

equity = 0.5 + 0.1 * len(set([p.get("visor") for p in payloads if isinstance(p, dict) and p.get("visor")]))
equity = max(0.0, min(1.0, equity))

scores = {
  "non_harm": round(non_harm,3),
  "stability": round(stability,3),
  "resilience": round(resilience,3),
  "equity": round(equity,3)
}
verdict = "OK" if scores["stability"]>=0.5 and scores["resilience"]>=0.5 else "OBSERVE"

pathlib.Path(os.path.dirname(out_json)).mkdir(parents=True, exist_ok=True)
with open(out_json,"w",encoding="utf-8") as f:
    json.dump({"date":date, "scores":scores, "verdict":verdict}, f, ensure_ascii=False, indent=2)

with open(out_md,"w",encoding="utf-8") as f:
    f.write("# Integration Test — Skywire → Sigma\n\n")
    f.write(f"**Date:** {date}\n\n")
    f.write("## Output\n\n")
    f.write(f"- Verdict: **{verdict}**\n")
    f.write(f"- Scores: `{scores}`\n")
    f.write(f"- Generated: {datetime.datetime.utcnow().isoformat()}Z\n")
PY

          cp "reports/${DATE}/integration_summary_${DATE}.md" "reports/latest/integration_summary.md"

      # 12) Artefacts d’intégration
      - name: Upload Integration Reports (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_integration_${{ steps.date.outputs.date }}
          path: |
            reports/${{ steps.date.outputs.date }}/integration_summary_${{ steps.date.outputs.date }}.md
            reports/${{ steps.date.outputs.date }}/skywire_sigma_analysis_${{ steps.date.outputs.date }}.json
          if-no-files-found: error
          retention-days: 7

      # 13) Commit & push des rapports
      - name: Commit & push reports
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add reports/
          git commit -m "report(skywire): vitals + integration — ${DATE}" || echo "No changes to commit"
          git push
