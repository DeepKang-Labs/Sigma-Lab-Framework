name: Skywire Vitals

on:
  schedule:
    - cron: "0 3 * * *"
  workflow_dispatch:

jobs:
  vitals:
    runs-on: ubuntu-latest
    name: Collect Skywire VitalSigns

    steps:
      - name: Checkout (full history, with token)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Date stamp (UTC)
        id: date
        run: echo "date=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Define endpoints env
        run: |
          echo "EXPLORER_ENDPOINTS=https://explorer.skycoin.com/api/blockchain/metadata,https://explorer.skycoin.com/api/coinSupply" >> $GITHUB_ENV
          echo "PUBLIC_ENDPOINTS=https://sd.skycoin.com/api/services?type=proxy,https://sd.skycoin.com/api/services?type=vpn,https://tpd.skywire.skycoin.com/all-transports,https://dmsgd.skywire.skycoin.com/dmsg-discovery/entries,https://rf.skywire.skycoin.com/" >> $GITHUB_ENV
          echo "FIBER_ENDPOINTS=https://fiber.skywire.dev/api/status,https://fiber.skywire.dev/api/metrics" >> $GITHUB_ENV
          echo "VISORS_PKS_FILE=.tmp/visors_pks.txt" >> $GITHUB_ENV

      - name: Build .tmp/visors_pks.txt (auto-discovery)
        run: |
          mkdir -p .tmp
          echo "# Auto-discovered PKs list" > .tmp/visors_pks.txt
          curl -s "https://sd.skycoin.com/api/services?type=visor" | jq -r '.[].pk?' >> .tmp/visors_pks.txt || true
          echo "[Info] PKs auto-discovery done: $(wc -l < .tmp/visors_pks.txt) entries."

      - name: Normalize env (comma lists -> files)
        run: |
          echo "Normalized env OK"

      - name: Run VitalSigns (produce JSON + Markdown)
        env:
          TODAY: ${{ steps.date.outputs.date }}
        run: |
          set -euxo pipefail
          mkdir -p data/${TODAY}
          python scripts/skywire_vitals.py
          echo "✅ Wrote vital data for ${TODAY}"

      - name: Upload RAW JSON (private artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: skywire_vitals_raw_${{ steps.date.outputs.date }}
          path: data/${{ steps.date.outputs.date }}/skywire_vitals.json
          retention-days: 14

      - name: Sanitize JSON (remove sensitive data)
        env:
          TODAY: ${{ steps.date.outputs.date }}
        run: |
          set -e
          python - <<'PY'
import os, json, sys

today = os.getenv("TODAY")
p = f"data/{today}/skywire_vitals.json"
q = f"data/{today}/skywire_vitals_sanitized.json"

try:
    with open(p) as f:
        doc = json.load(f)
except FileNotFoundError:
    print("⚠️ No raw JSON found.")
    sys.exit(0)

for g in doc.get("groups", []):
    if g.get("name") == "nodes":
        g["visors_pks"] = []
        s = g.get("summary", {})
        if "ut_note" in s:
            s["ut_note"] = "(redacted)"
        g["summary"] = s

with open(q, "w") as f:
    json.dump(doc, f, indent=2, ensure_ascii=False)
print(f"✅ Sanitized written: {q}")
PY

      - name: Upload SANITIZED JSON (private artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: skywire_vitals_sanitized_${{ steps.date.outputs.date }}
          path: data/${{ steps.date.outputs.date }}/skywire_vitals_sanitized.json
          retention-days: 30

      - name: Commit & push summary (rebase-safe)
        env:
          TODAY: ${{ steps.date.outputs.date }}
        run: |
          set -euxo pipefail
          git config user.name "Sigma-Bot"
          git config user.email "bot@sigmalab.local"
          git add "data/${TODAY}/skywire_summary.md" || true
          git add "data/${TODAY}/skywire_vitals.json" || true
          git commit -m "chore(data): Skywire VitalSigns daily snapshot" || true
          git pull --rebase
          git push
