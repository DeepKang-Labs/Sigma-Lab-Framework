name: Skywire / VitalSigns + Sigma Integration

on:
  workflow_dispatch:
  schedule:
    - cron: "17 3 * * *"

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install minimal deps
        run: |
          python -m pip install -U pip
          pip install "requests>=2.31" "pandas>=2.0" "matplotlib>=3.8"

      - name: Date stamp (UTC)
        id: date
        run: echo "date=$(date -u +%F)" >> "$GITHUB_OUTPUT"

      - name: Prepare folders
        run: |
          set -euo pipefail
          DATE="${{ steps.date.outputs.date }}"
          mkdir -p "data/${DATE}" "reports/${DATE}" reports/latest artifacts/raw artifacts/sanitized

      - name: Safe defaults for discovery
        run: |
          set -euo pipefail
          mkdir -p .tmp
          printf "036a...dummyA\n047b...dummyB\n" > .tmp/visors_pks.txt

      - name: Run VitalSigns (produce JSON)
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          OUT_JSON="data/${DATE}/skywire_vitals.json"
          OUT_MD="data/${DATE}/skywire_summary.md"
          if [ -f scripts/skywire_vitals.py ]; then
            echo "✅ Using scripts/skywire_vitals.py"
            python scripts/skywire_vitals.py --out "$OUT_JSON" --summary "$OUT_MD"
          else
            echo "⚠️  Fallback VitalSigns (inline)"
            python - <<'PY'
import os, json, datetime, pathlib
d = os.environ.get('DATE','unknown')
out_json = f"data/{d}/skywire_vitals.json"
out_md = f"data/{d}/skywire_summary.md"
payload = {
  "date_utc": d,
  "meta": {"source":"fallback","repo":"Sigma-Lab-Framework"},
  "groups": [{"name":"explorer","endpoints":[],"payloads":[]}],
  "summary": {"height":None,"current_supply":None,"total_supply":None,"coin_hours":None}
}
pathlib.Path(os.path.dirname(out_json)).mkdir(parents=True, exist_ok=True)
with open(out_json,"w",encoding="utf-8") as f:
  json.dump(payload,f,ensure_ascii=False,indent=2)
with open(out_md,"w",encoding="utf-8") as f:
  f.write("# Skywire VitalSigns (fallback)\n\n")
  f.write(f"- generated: {datetime.datetime.utcnow().isoformat()}Z\n")
PY
          fi

      - name: Upload RAW JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_raw_${{ steps.date.outputs.date }}
          path: data/${{ steps.date.outputs.date }}/skywire_vitals.json
          if-no-files-found: error
          retention-days: 7

      - name: Sanitize + Report + Transform → Sigma
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          IN="data/${DATE}/skywire_vitals.json"
          OUT_SAN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT_MD="reports/${DATE}/skywire_vital_report.md"
          OUT_SIG="reports/${DATE}/skywire_sigma_analysis.json"
          python scripts/bridge.py --in "$IN" --out "$OUT_SAN" --md "$OUT_MD" --sigma "$OUT_SIG"

      - name: Upload SANITIZED JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_sanitized_${{ steps.date.outputs.date }}
          path: reports/${{ steps.date.outputs.date }}/skywire_vitals_sanitized.json
          if-no-files-found: error
          retention-days: 7

      - name: Run Integration (Skywire → Sigma)
        run: |
          set -euo pipefail
          DATE="${{ steps.date.outputs.date }}"
          SIG="reports/${DATE}/skywire_sigma_analysis.json"
          python scripts/sigma_report.py --in "$SIG" --date "$DATE"

      - name: Commit & push reports
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git config user.name "sigma-bot"
          git config user.email "sigma-bot@users.noreply.github.com"
          git pull --rebase --autostash || true
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          DATE="${{ steps.date.outputs.date }}"
          git commit -m "report(skywire): vitals + integration — ${DATE}"
          git pull --rebase --autostash || true
          git push origin HEAD:main
