name: Skywire VitalSigns

on:
  workflow_dispatch:
  schedule:
    - cron: "17 03 * * *"  # daily 03:17 UTC

jobs:
  vitals:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      # 1) Repo
      - name: Checkout (full history, with token)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      # 2) Python + tools
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq
          python -m pip install --upgrade pip
          pip install requests

      # 3) Horodatage (pour arborescence data/YYYY-MM-DD)
      - name: Date stamp (UTC)
        id: date
        run: echo "date=$(date -u +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"

      # 4) Endpoints + fichier PKs cible (via $GITHUB_ENV)
      - name: Define endpoints env
        run: |
          echo "EXPLORER_ENDPOINTS=https://explorer.skycoin.com/api/blockchain/metadata,https://explorer.skycoin.com/api/coinSupply" >> "$GITHUB_ENV"
          echo "PUBLIC_ENDPOINTS=https://sd.skycoin.com/api/services?type=proxy,https://sd.skycoin.com/api/services?type=vpn,https://tpd.skywire.skycoin.com/all-transports,https://dmsgd.skywire.skycoin.com/dmsg-discovery/entries,https://rf.skywire.skycoin.com/" >> "$GITHUB_ENV"
          echo "FIBER_ENDPOINTS=https://fiber.skywire.dev/api/status,https://fiber.skywire.dev/api/metrics" >> "$GITHUB_ENV"
          echo "VISORS_PKS_FILE=.tmp/visors_pks.txt" >> "$GITHUB_ENV"

      # 5) Auto-discovery tolérant des PKs (n'échoue pas si SD renvoie null)
      - name: Build .tmp/visors_pks.txt (auto-discovery)
        run: |
          set -euo pipefail
          mkdir -p .tmp
          echo "# Auto-discovered PKs list" > .tmp/visors_pks.txt
          json=$(curl -fsSL "https://sd.skycoin.com/api/services?type=visor" || echo "null")
          if echo "$json" | jq -e 'type=="array"' > /dev/null 2>&1; then
            echo "$json" | jq -r '.[].pk?' | sed '/^null$/d;/^$/d' >> .tmp/visors_pks.txt
            echo "[Info] PKs auto-discovery done: $(wc -l < .tmp/visors_pks.txt) entries."
          else
            echo "[Warn] No valid array returned by Skycoin SD API, skipping PK auto-discovery."
          fi

      # 6) Collecte: JSON + Markdown
      - name: Run VitalSigns (produce JSON + Markdown)
        env:
          TODAY: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          mkdir -p "data/${TODAY}"
          python scripts/skywire_vitals.py
          echo "✅ Wrote vital data for ${TODAY}"

      # 7) Artefact privé: JSON brut
      - name: Upload RAW JSON (private artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: skywire_vitals_raw_${{ steps.date.outputs.date }}
          path: data/${{ steps.date.outputs.date }}/skywire_vitals.json
          if-no-files-found: warn
          retention-days: 14

      # 8) Sanitize (version robuste via fichier temporaire)
      - name: Sanitize JSON (remove sensitive data)
        env:
          TODAY: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          mkdir -p .tmp
          cat > .tmp/sanitize.py <<'PY'
          import os, json, sys
          today = os.getenv("TODAY")
          p = f"data/{today}/skywire_vitals.json"
          q = f"data/{today}/skywire_vitals_sanitized.json"

          try:
              with open(p) as f:
                  doc = json.load(f)
          except FileNotFoundError:
              print("⚠️ No raw JSON found.")
              sys.exit(0)

          for g in doc.get("groups", []):
              if g.get("name") == "nodes":
                  # never publish PK list
                  g["visors_pks"] = []
                  s = g.get("summary", {}) or {}
                  if "ut_note" in s:
                      s["ut_note"] = "(redacted)"
                  g["summary"] = s

          with open(q, "w") as f:
              json.dump(doc, f, indent=2, ensure_ascii=False)
          print(f"✅ Sanitized written: {q}")
          PY
          python .tmp/sanitize.py

      # 9) Artefact privé: JSON épuré (pour audit hors-repo)
      - name: Upload SANITIZED JSON (private artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: skywire_vitals_sanitized_${{ steps.date.outputs.date }}
          path: data/${{ steps.date.outputs.date }}/skywire_vitals_sanitized.json
          if-no-files-found: warn
          retention-days: 14

      # 10) Commit & push Markdown + JSON public si présents
      - name: Commit & push summary (rebase-safe)
        env:
          TODAY: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          git config user.name  "sigma-bot"
          git config user.email "sigma-bot@deepkang.labs"
          git add -A
          git commit -m "chore(data): Skywire VitalSigns daily snapshot for ${TODAY}" || true
          git pull --rebase --autostash
          git push
