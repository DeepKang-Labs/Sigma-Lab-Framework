name: Skywire VitalSigns

on:
  workflow_dispatch:
  schedule:
    - cron: "17 03 * * *" # daily 03:17 UTC

concurrency:
  group: skywire-vitals-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  vitals:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: Date stamp (UTC)
        id: date
        run: echo "date=$(date -u +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"

      - name: Define endpoints env
        run: |
          echo "EXPLORER_ENDPOINTS=https://explorer.skycoin.com/api/blockchain/metadata,https://explorer.skycoin.com/api/coinSupply" >> "$GITHUB_ENV"
          echo "PUBLIC_ENDPOINTS=https://sd.skycoin.com/api/services?type=proxy,https://sd.skycoin.com/api/services?type=vpn,https://tpd.skywire.skycoin.com/all-transports,https://dmsgd.skywire.skycoin.com/dmsg-discovery/entries,https://rf.skywire.skycoin.com/" >> "$GITHUB_ENV"
          echo "FIBER_ENDPOINTS=https://fiber.skywire.dev/api/status,https://fiber.skywire.dev/api/metrics" >> "$GITHUB_ENV"
          echo "VISORS_PKS_FILE=.tmp/visors_pks.txt" >> "$GITHUB_ENV"

      - name: Build .tmp/visors_pks.txt (auto-discovery)
        run: |
          set -euo pipefail
          mkdir -p .tmp
          echo "# Auto-discovered PKs list" > .tmp/visors_pks.txt
          # Découverte des visors publiés (si JSON avec .pk)
          curl -sS "https://sd.skycoin.com/api/services?type=visor" | jq -r '.[].pk?' | sed '/^null$/d;/^$/d' >> .tmp/visors_pks.txt || true
          echo "[Info] PKs auto-discovery done: $(wc -l < .tmp/visors_pks.txt) entries."

      - name: Run VitalSigns (produce JSON)
        env:
          TODAY: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          mkdir -p "data/${TODAY}"
          python scripts/skywire_vitals.py
          echo "✅ Wrote vital data for ${TODAY}"

      - name: Upload RAW JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_vitals_raw_${{ steps.date.outputs.date }}
          path: data/${{ steps.date.outputs.date }}/skywire_vitals.json
          if-no-files-found: warn
          retention-days: 14

      - name: Sanitize JSON (private → public-safe)
        env:
          TODAY: ${{ steps.date.outputs.date }}
        run: |
          set -e
          python - <<'PY'
          import os, json, sys
          today = os.getenv("TODAY")
          p = f"data/{today}/skywire_vitals.json"
          q = f"data/{today}/skywire_vitals_sanitized.json"
          try:
              with open(p) as f:
                  doc = json.load(f)
          except FileNotFoundError:
              print("⚠️ No raw JSON found.")
              sys.exit(0)
          for g in doc.get("groups", []):
              if g.get("name") == "nodes":
                  g["visors_pks"] = []
                  s = g.get("summary", {}) or {}
                  if "ut_note" in s:
                      s["ut_note"] = "(redacted)"
                  g["summary"] = s
          with open(q, "w") as f:
              json.dump(doc, f, indent=2, ensure_ascii=False)
          print(f"✅ Sanitized written: {q}")
          PY

      - name: Upload SANITIZED JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_vitals_sanitized_${{ steps.date.outputs.date }}
          path: data/${{ steps.date.outputs.date }}/skywire_vitals_sanitized.json
          if-no-files-found: warn
          retention-days: 14

      # ========= NOUVELLE ÉTAPE : Intégration Skywire → Sigma =========
      - name: Install local engine deps for integration
        run: |
          set -euo pipefail
          # dépendances minimales pour run_network_integrated.py
          pip install --no-cache-dir pyyaml

      - name: Run Integration (Skywire → Sigma) + reports
        run: |
          set -euo pipefail
          python network_bridge/run_network_integrated.py \
            --network skywire \
            --discovery data/ \
            --also-md \
            --claude-report

      - name: Upload Integration Reports (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: sigma_integration_${{ steps.date.outputs.date }}
          path: reports/integrations/
          if-no-files-found: warn
          retention-days: 14

      - name: Commit & push reports
        env:
          TODAY: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          git config user.name  "sigma-bot"
          git config user.email "sigma-bot@deepkang.labs"
          git add reports/integrations/ || true
          git add data/${TODAY}/skywire_vitals*.json || true
          git commit -m "chore(reports): Skywire→Sigma integration run for ${TODAY}" || echo "No changes to commit."
          git pull --rebase
          git push
