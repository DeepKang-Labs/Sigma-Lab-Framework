name: Skywire / VitalSigns + Sigma Integration

on:
  workflow_dispatch:
  schedule:
    - cron: "07 00 * * *"   # tous les jours √† 00:07 UTC

permissions:
  contents: write

concurrency:
  group: skywire-vitals
  cancel-in-progress: false

jobs:
  vitals:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install requests pyyaml
          fi

      - name: Date stamp (UTC)
        id: date
        run: echo "date=$(date -u +%Y-%m-%d)" >> "$GITHUB_OUTPUT"

      - name: Prepare folders
        env:
          ARTIFACTS_ROOT: artifacts
        run: |
          set -euo pipefail
          mkdir -p data/${{ steps.date.outputs.date }}
          mkdir -p reports/${{ steps.date.outputs.date }}
          mkdir -p reports/latest
          mkdir -p ${ARTIFACTS_ROOT}/raw
          mkdir -p ${ARTIFACTS_ROOT}/sanitized
          mkdir -p ${ARTIFACTS_ROOT}/integration

      - name: Define endpoints env (auto-discovery safe defaults)
        run: |
          set -euo pipefail
          : "${SKYWIRE_EXPLORER_URL:=https://explorer.skycoin.com/api}"
          echo "SKYWIRE_EXPLORER_URL=$SKYWIRE_EXPLORER_URL" >> $GITHUB_ENV

      # ---------- Capture des m√©triques ----------
      - name: Run VitalSigns (produce JSON)
        env:
          ARTIFACTS_ROOT: artifacts
        run: |
          set -euo pipefail

          echo "ü©∫ Starting Skywire VitalSigns data capture..."
          echo "üìÖ Date: ${{ steps.date.outputs.date }}"

          python scripts/skywire_vitals.py \
            --out data/${{ steps.date.outputs.date }}/

          echo "üß© Listing produced files:"
          ls -lh data/${{ steps.date.outputs.date }}/ || true

          RAW_JSON="data/${{ steps.date.outputs.date }}/skywire_vitals.json"
          RAW_SUMMARY="data/${{ steps.date.outputs.date }}/skywire_summary.md"

          if [ ! -f "$RAW_JSON" ]; then
            echo "‚ùå Missing $RAW_JSON"; exit 1
          fi

          cp "$RAW_JSON"    ${ARTIFACTS_ROOT}/raw/skywire_vitals_${{ steps.date.outputs.date }}.json
          if [ -f "$RAW_SUMMARY" ]; then
            cp "$RAW_SUMMARY" ${ARTIFACTS_ROOT}/raw/skywire_summary_${{ steps.date.outputs.date }}.md
          fi

          echo "‚úÖ VitalSigns capture complete."

      - name: Upload RAW JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_raw_${{ steps.date.outputs.date }}
          path: artifacts/raw/*
          if-no-files-found: error
          retention-days: 7

      # ---------- Sanitize + quick report ----------
      - name: Sanitize JSON (private ‚Üí public-safe) + generate quick report
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail

          IN="data/${DATE}/skywire_vitals.json"
          OUT_SAN="reports/${DATE}/skywire_vitals_sanitized.json"
          OUT_MD="reports/${DATE}/skywire_vital_report.md"

          # Si ton repo poss√®de scripts/skywire_vital_report.py, on l‚Äôutilise.
          if [ -f scripts/skywire_vital_report.py ]; then
            python scripts/skywire_vital_report.py --in "$IN" --out "reports/${DATE}/"
          else
            # Fallback minimal (copie et mini r√©sum√©)
            python - <<'PY'
import json, os, sys, datetime
date = os.environ["DATE"]
inp = f"data/{date}/skywire_vitals.json"
out_json = f"reports/{date}/skywire_vitals_sanitized.json"
out_md = f"reports/{date}/skywire_vital_report.md"

with open(inp, "r", encoding="utf-8") as f:
    data = json.load(f)

# Sanitize l√©ger (retire des champs potentiellement sensibles s'ils existent)
for k in ("ip", "public_key", "debug"):
    if k in data: data.pop(k)

os.makedirs(os.path.dirname(out_json), exist_ok=True)
with open(out_json, "w", encoding="utf-8") as f:
    json.dump(data, f, ensure_ascii=False, indent=2)

md = [
  f"# Skywire Vital Report ({date})",
  "",
  f"- Generated: {datetime.datetime.utcnow().isoformat()}Z",
  f"- Fields: {len(data) if hasattr(data, '__len__') else 'n/a'}",
  "",
  "This is an auto-generated minimal report.",
]
with open(out_md, "w", encoding="utf-8") as f:
  f.write("\n".join(md))
PY
          fi

          # Met √† jour "latest"
          rsync -a --delete "reports/${DATE}/" "reports/latest/"

          # Duplique vers artifacts/sanitized pour export
          cp "reports/${DATE}/skywire_vitals_sanitized.json" "artifacts/sanitized/skywire_vitals_${DATE}.json" || true

      - name: Upload SANITIZED JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_sanitized_${{ steps.date.outputs.date }}
          path: artifacts/sanitized/*
          if-no-files-found: warn
          retention-days: 7

      # ---------- Rendre le moteur importable ----------
      - name: Make engine importable (package + PYTHONPATH)
        run: |
          set -euo pipefail
          touch engine/__init__.py || true
          echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      # ---------- Int√©gration Skywire ‚Üí Sigma ----------
      - name: Run Integration (Skywire ‚Üí Sigma) + reports
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          echo "Using PYTHONPATH=$PYTHONPATH"
          IN="data/${DATE}/skywire_vitals.json"
          OUT_DIR="reports/${DATE}/integration"
          mkdir -p "$OUT_DIR"

          if [ -f scripts/bridge_integration.py ]; then
            python scripts/bridge_integration.py \
              --input "$IN" \
              --out "$OUT_DIR"
          elif [ -f scripts/sigma_analyzer.py ]; then
            python scripts/sigma_analyzer.py \
              --input "$IN" \
              --out "$OUT_DIR"
          else
            echo "‚ö†Ô∏è Integration scripts not found; generating minimal placeholder."
            python - <<'PY'
import json, os, datetime
date = os.environ["DATE"]
inp = f"data/{date}/skywire_vitals.json"
out_dir = f"reports/{date}/integration"
os.makedirs(out_dir, exist_ok=True)
with open(inp, "r", encoding="utf-8") as f:
    raw = json.load(f)
res = {
  "date": date,
  "scores": {"non_harm": 0.72, "stability": 0.61, "resilience": 0.65, "equity": 0.58},
  "verdict": "experimental",
  "notes": "Placeholder integration; replace with SigmaAnalyzer."
}
with open(os.path.join(out_dir, "skywire_sigma_analysis.json"), "w", encoding="utf-8") as f:
    json.dump(res, f, indent=2, ensure_ascii=False)
with open(os.path.join(out_dir, "README.md"), "w", encoding="utf-8") as f:
    f.write(f"# Integration Output ({date})\n\n- Status: Placeholder\n")
PY
          fi

          # Publie aussi dans artifacts
          cp -r "$OUT_DIR"/. artifacts/integration/ || true

      - name: Upload Integration Reports (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: skywire_sigma_integration_${{ steps.date.outputs.date }}
          path: |
            artifacts/integration/**
            reports/${{ steps.date.outputs.date }}/integration/**
          if-no-files-found: warn
          retention-days: 7

      - name: Commit & push reports
        env:
          DATE: ${{ steps.date.outputs.date }}
        run: |
          set -euo pipefail
          git config user.name  "sigma-bot"
          git config user.email "actions@github.com"
          git add reports/${DATE} reports/latest || true
          if ! git diff --cached --quiet; then
            git commit -m "chore(reports): Skywire‚ÜíSigma integration report for ${DATE}"
            git push
          else
            echo "No report changes to commit."
          fi
