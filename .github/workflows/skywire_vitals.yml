name: Skywire VitalSigns

on:
  workflow_dispatch:
  schedule:
    - cron: "17 5 * * *"  # daily ~05:17 UTC

jobs:
  vitals:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml jq
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Date stamp (UTC)
        id: date
        run: echo "today=$(date -u +%F)" >> "$GITHUB_OUTPUT"

      - name: Define endpoints env
        run: |
          echo "SKYWIRE_ENDPOINTS=https://explorer.skycoin.com/api/blockchain/metadata,https://explorer.skycoin.com/api/coinSupply" >> $GITHUB_ENV
          echo "SKYWIRE_PUBLIC_ENDPOINTS=https://sd.skycoin.com/api/services?type=proxy,https://sd.skycoin.com/api/services?type=vpn,https://tpd.skywire.skycoin.com/all-transports,https://dmsgd.skywire.skycoin.com/dmsg-discovery/entries,https://rf.skywire.skycoin.com/" >> $GITHUB_ENV
          echo "FIBER_ENDPOINTS=https://fiber.skywire.dev/api/status,https://fiber.skywire.dev/api/metrics" >> $GITHUB_ENV
          echo "UT_MAX_VISORS=${{ vars.UT_MAX_VISORS || 200 }}" >> $GITHUB_ENV
          echo "UT_SAMPLE_MODE=${{ vars.UT_SAMPLE_MODE || 'random' }}" >> $GITHUB_ENV
          echo "PYTHONUNBUFFERED=1" >> $GITHUB_ENV

      - name: Fetch public visors PKs (auto-discovery)
        id: visors
        run: |
          set -euo pipefail
          echo "Fetching visors from Skywire public directory..."
          curl -fsSL "https://sd.skycoin.com/api/services?type=visor" \
            | jq -r '.services[].address' \
            | head -n "${UT_MAX_VISORS:-200}" > visors.txt || true
          count=$(wc -l < visors.txt || echo 0)
          echo "Found $count public visors."
          if [ "$count" -gt 0 ]; then
            paste -sd, visors.txt > visors.csv
            echo "VISORS_PKS=$(cat visors.csv)" >> $GITHUB_ENV
          else
            echo "VISORS_PKS=" >> $GITHUB_ENV
          fi

      - name: Normalize env (comma lists -> files)
        run: |
          mkdir -p .envlists
          printf "%s" "$SKYWIRE_ENDPOINTS" | tr ',' '\n' > .envlists/skywire.txt
          printf "%s" "$SKYWIRE_PUBLIC_ENDPOINTS" | tr ',' '\n' > .envlists/public.txt
          printf "%s" "$FIBER_ENDPOINTS" | tr ',' '\n' > .envlists/fiber.txt
          printf "%s" "${VISORS_PKS:-}" | tr ',' '\n' | sed '/^$/d' > .envlists/visors.txt

      - name: Run VitalSigns (produce JSON + Markdown)
        env:
          TODAY: ${{ steps.date.outputs.today }}
        run: |
          set -euo pipefail
          mkdir -p "data/${TODAY}"
          python scripts/skywire_vitals.py
          echo "Wrote data/${TODAY}/skywire_vitals.json and data/${TODAY}/skywire_summary.md"

      - name: Upload RAW JSON (private artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: skywire_vitals_raw_${{ steps.date.outputs.today }}
          path: data/${{ steps.date.outputs.today }}/skywire_vitals.json
          if-no-files-found: warn
          retention-days: 14

      - name: Sanitize JSON (remove sensitive data)
        env:
          TODAY: ${{ steps.date.outputs.today }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, json, sys
          today = os.environ.get("TODAY","")
          p = f"data/{today}/skywire_vitals.json"
          q = f"data/{today}/skywire_vitals_sanitized.json"
          try:
              with open(p, "r") as f:
                  doc = json.load(f)
          except FileNotFoundError:
              print("No raw JSON found; skipping sanitize.")
              sys.exit(0)
          for g in doc.get("groups", []):
              if g.get("name") == "public":
                  s = g.get("summary", {})
                  samples = s.get("samples", {})
                  if isinstance(samples, dict):
                      for k, v in list(samples.items()):
                          if isinstance(v, list):
                              samples[k] = len(v)
                  for it in g.get("payloads", []):
                      for k in list(it.keys()):
                          if k not in ("__url__", "__ok__", "__status__"):
                              del it[k]
              if g.get("name") == "nodes":
                  g["visors_pks"] = []
                  s = g.get("summary", {}) or {}
                  if "ut_note" in s:
                      s["ut_note"] = "(redacted)"
                  g["summary"] = s
          with open(q, "w") as f:
              json.dump(doc, f, indent=2, ensure_ascii=False)
          print(f"Sanitized written: {q}")
          PY

      - name: Upload SANITIZED JSON (private artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: skywire_vitals_sanitized_${{ steps.date.outputs.today }}
          path: data/${{ steps.date.outputs.today }}/skywire_vitals_sanitized.json
          if-no-files-found: warn
          retention-days: 14

      - name: Commit & push summary (rebase-safe)
        if: success()
        env:
          TODAY: ${{ steps.date.outputs.today }}
          GIT_AUTHOR_NAME: sigma-bot
          GIT_AUTHOR_EMAIL: bot@deepkang.local
          GIT_COMMITTER_NAME: sigma-bot
          GIT_COMMITTER_EMAIL: bot@deepkang.local
        run: |
          set -euo pipefail
          git pull --rebase
          git add "data/${TODAY}/skywire_summary.md"
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "chore(data): Skywire VitalSigns daily snapshot" \
                      -m "Adds auto-discovered VISORS_PKS, explorer supply stats, public infra counts, sanitized JSON stored as private artifact."
          git push
